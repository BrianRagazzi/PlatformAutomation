---
platform: linux


inputs:
- name: config # contains the env file with target OpsMan Information
- name: vars # variable files to be made available
- name: secrets
  optional: true
- name: custom-tasks

outputs:
 - name: vars

params:
  NSXT_INFRA_CONFIG_FILE: pks-vars.yml
  PKS_VARS_FILE: pks-vars.yml
  NSX_VARS_FILE: pks-nsx-vars.yml
  PI_NAME: tkgi-nsx-superuser


run:
  path: bash
  args:
  - "-c"
  - |
    set -eu

    export NSXUSERNAME=$(yq eval '.nsxt_admin_username' $NSXT_INFRA_CONFIG_FILE )
    export NSXPASSWORD=$(yq eval '.nsxt_admin_password' $NSXT_INFRA_CONFIG_FILE )
    export NSXHOSTNAME=$(yq eval '.nsxt_manager' $NSXT_INFRA_CONFIG_FILE )
    export NSX_SUPERUSER_CERT_FILE="pks-nsx-t-superuser.crt"
    export NSX_SUPERUSER_KEY_FILE="pks-nsx-t-superuser.key"

    set -eux

    source custom-tasks/tasks/functions/nsxt4.sh
    source custom-tasks/tasks/functions/nsxt-yml.sh


    poolname=$(yq eval '.properties_network_selector_nsx_floating-ip-pool-name' $PKS_VARS_FILE)
    poolid=$(Get_NSX_IP_Pool_ID $poolname)
    podsblockname=$(yq eval '.properties_network_selector_nsx_ip-block-name' $PKS_VARS_FILE)
    podsblockid=$(Get_NSX_IP_Block_ID $podsblockname)

    nodesblockname=$(yq eval '.properties_network_selector_nsx_nodes-ip-block-name' $PKS_VARS_FILE)
    nodesblockid=$(Get_NSX_IP_Block_ID $nodesblockname)
    t0name=$(yq eval '.properties_network_selector_nsx_t0-router-name' $PKS_VARS_FILE)
    t0id=$t0name

    if [ ! -f "$NSX_VARS_FILE" ]; then
      touch "$NSX_VARS_FILE"
    fi

    yq -i '.properties_network_selector_nsx_floating-ip-pool-ids="'"$poolid"'"' $NSX_VARS_FILE
    yq -i '.properties_network_selector_nsx_nodes-ip-block-id="'"$nodesblockid"'"' $NSX_VARS_FILE
    yq -i '.properties_network_selector_nsx_ip-block-id="'"$podsblockid"'"' $NSX_VARS_FILE
    yq -i '.properties_network_selector_nsx_t0-router-id="'"$t0id"'"' $NSX_VARS_FILE

    # Check whether there is already a cert set, if not create one
    currentcert=$(yq eval '.properties_network_selector_nsx_nsx-t-superuser-certificate_cert_pem' $NSX_VARS_FILE)
    # if [ -z "$currentcert" ] || [ "$currentcert" = "null"]; then
    if ! yq eval '.properties_network_selector_nsx_nsx-t-superuser-certificate_cert_pem | has(.)' $NSX_VARS_FILE | grep -q "true"; then
      # Must create
      openssl req \
        -newkey rsa:2048 \
        -x509 \
        -nodes \
        -keyout "$NSX_SUPERUSER_KEY_FILE" \
        -new \
        -out "$NSX_SUPERUSER_CERT_FILE" \
        -subj /CN="$PI_NAME" \
        -extensions client_server_ssl \
        -config <(
          cat /etc/ssl/openssl.cnf \
          <(printf '[client_server_ssl]\nextendedKeyUsage = clientAuth\n')
        ) \
        -sha256 \
        -days 730

      yq -i '.properties_network_selector_nsx_nsx-t-superuser-certificate_cert_pem = "'"$(cat $NSX_SUPERUSER_CERT_FILE)"'"' $NSX_VARS_FILE
      yq -i '.properties_network_selector_nsx_nsx-t-superuser-certificate_private_key_pem = "'"$(cat $NSX_SUPERUSER_KEY_FILE)"'"' $NSX_VARS_FILE
      currentcert=$(cat $NSX_SUPERUSER_CERT_FILE)
    else
      echo "nsx superuser cert already exists"
      echo $currentcert > $NSX_SUPERUSER_CERT_FILE
    fi
    Get_TKGI_SuperUser_ID $PI_NAME $NSX_SUPERUSER_CERT_FILE
