# The inputs, outputs, params, filename, and filepath
# of this task file are part of its semantically versioned API.
# See our documentation for a detailed discussion of our semver API.
# See www.semver.org for an explanation of semantic versioning.

# code_snippet apply-director-changes start yaml
---
platform: linux


inputs:
- name: config # contains the base configuration file
- name: env # contains the env file with target OpsMan Information
- name: secrets
  # secret files to be made available
  # separate from vars, so they can be store securely
  optional: true

params:
  VARS_FILES:
  # - Optional
  # - Filepath to the vars yaml file
  # - The path is relative to root of the task build,
  #   so `vars` and `secrets` can be used.

  CONFIG_FILE: base.yml
  # - Required
  # - Filepath to the base yaml file to interpolate from
  # - The path is relative to root of the task build

  ENV_FILE: env.yml
  # - Required
  # - Filepath of the env config YAML
  # - The path is relative to root of the `env` input
  SKIP_MISSING: true
  # - Optional
  # - Change to false to have strict interpolation
  #   and fail if params are missing from vars

run:
  path: bash
  args:
  - "-c"
  - |
    # cat /var/version && echo ""
    set -eux

    # add dependencies to platform automation image
    # curl https://packages.cloudfoundry.org/debian/cli.cloudfoundry.org.key | apt-key add -
    # echo "deb https://packages.cloudfoundry.org/debian stable main" | tee /etc/apt/sources.list.d/cloudfoundry-cli.list
    # apt-get -y update
    # apt-get install jq ruby-full -y
    # gem install cf-uaac

    # vars_files_args=("")
    # for vf in ${VARS_FILES}
    # do
    #   vars_files_args+=("--vars-file ${vf}")
    # done

    if [ "$SKIP_MISSING" ]; then
      export SKIP_MISSING="--skip-missing"
    else
      export SKIP_MISSING=""
    fi

    # ${vars_files_args[@] needs to be globbed to pass through properly
    # shellcheck disable=SC2068
    # om interpolate --config "config/$CONFIG_FILE" "$SKIP_MISSING" ${vars_files_args[@]} --path /properties_pks_api_hostname

    GROUP_DISTINGUISHED_NAME=$(om interpolate --config "config/$CONFIG_FILE" "$SKIP_MISSING" --path /pas_admin_ldap_group_dn)


    CF_GUID=$(om --env env/"${ENV_FILE}" curl --silent --path \
      "/api/v0/deployed/products" | \
      jq -r '.[] | .installation_name' | grep cf- | tail -1)

    SYS_DOMAIN=$(om --env env/"${ENV_FILE}" curl --silent --path \
      "/api/v0/staged/products/${CF_GUID}/properties" | \
      jq -r '.[] | .[".cloud_controller.system_domain"].value')

    ADMIN_CLIENT_PASSWORD=$(om --env env/"${ENV_FILE}" curl --silent --path \
      "/api/v0/deployed/products/${CF_GUID}/credentials/.uaa.admin_client_credentials" | \
      jq -rc '.credential.value.password')

    echo "Connecting to PAS UAA server [uaa.$SYS_DOMAIN]..."
    # login to PAS UAA
    uaac target https://uaa.$SYS_DOMAIN --skip-ssl-validation
    uaac token client get admin --secret $ADMIN_CLIENT_PASSWORD

    # set +eu
    uaac group map --name uaa.admin "$GROUP_DISTINGUISHED_NAME"
    uaac group map --name cloud_controller.admin "$GROUP_DISTINGUISHED_NAME"
    uaac group map --name scim.read "$GROUP_DISTINGUISHED_NAME"
    uaac group map --name scim.write "$GROUP_DISTINGUISHED_NAME"
    # set -eu
