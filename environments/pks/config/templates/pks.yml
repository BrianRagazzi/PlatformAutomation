product-name: pivotal-container-service
product-properties:
  .pivotal-container-service.pks_tls:
    value:
      cert_pem: ((pivotal-container-service_pks_tls.cert_pem))
      private_key_pem: ((pivotal-container-service_pks_tls.private_key_pem))
  .properties.cloud_provider:
    selected_option: ((properties_cloud_provider))
    value: ((properties_cloud_provider))
  .properties.cloud_provider.vsphere.vcenter_dc:
    value: ((properties_cloud_provider_vcenter_dc))
  .properties.cloud_provider.vsphere.vcenter_ds:
    value: ((properties_cloud_provider_vcenter_ds))
  .properties.cloud_provider.vsphere.vcenter_ip:
    value: ((properties_cloud_provider_vcenter_ip))
  .properties.cloud_provider.vsphere.vcenter_master_creds:
    value:
      identity: ((properties_cloud_provider_vsphere_vcenter_master_creds.identity))
      password: ((properties_cloud_provider_vsphere_vcenter_master_creds.password))
  .properties.cloud_provider.vsphere.vcenter_vms:
    value: ((properties_cloud_provider_vcenter_vms))
  .properties.log_sink_resources_deploy:
    value: ((properties_log_sink_resources_deploy))
  .properties.metric_sink_resources_deploy:
    value: ((properties_log_sink_resources_deploy))
  .properties.network_selector:
    selected_option: properties_network_selector
    value: properties_network_selector
  .properties.network_selector.nsx.cloud-config-dns:
    value: ((properties.network_selector.nsx.cloud-config-dns))
  .properties.network_selector.nsx.floating-ip-pool-ids:
    value: ((properties.network_selector.nsx.floating-ip-pool-ids))
  .properties.network_selector.nsx.ip-block-id:
    value: ((properties.network_selector.nsx.ip-block-id))
  .properties.network_selector.nsx.lb_size_large_supported:
    value: ((properties.network_selector.nsx.lb_size_large_supported))
  .properties.network_selector.nsx.lb_size_medium_supported:
    value: ((properties.network_selector.nsx.lb_size_medium_supported))
  .properties.network_selector.nsx.nat_mode:
    value: ((properties.network_selector.nsx.nat_mode))
  .properties.network_selector.nsx.network_automation:
    value: ((properties.network_selector.nsx.network_automation))
  .properties.network_selector.nsx.nodes-ip-block-id:
    value: ((properties.network_selector.nsx.nodes-ip-block-id))
  .properties.network_selector.nsx.nsx-t-ca-cert:
    value: ((properties.nsx_api_ca_cert))
  .properties.network_selector.nsx.nsx-t-host:
    value: corensxmgr.ragazzilab.com
  .properties.network_selector.nsx.nsx-t-insecure:
    value: ((properties.network_selector.nsx.nsx-t-insecure))
  .properties.network_selector.nsx.nsx-t-superuser-certificate:
    value:
      cert_pem: ((properties_network_selector_nsx_nsx-t-superuser-certificate.cert_pem))
      private_key_pem: ((properties_network_selector_nsx_nsx-t-superuser-certificate.private_key_pem))
  .properties.network_selector.nsx.t0-router-id:
    value: ((properties.network_selector.nsx.t0-router-id))
  .properties.network_selector.nsx.vcenter_cluster:
    value: ((properties.network_selector.nsx.vcenter_cluster))
  .properties.pks-vrli:
    selected_option: ((properties.pks-vrli))
    value: ((properties.pks-vrli))
  .properties.pks-vrli.enabled.host:
    value: ((properties.pks-vrli.enabled.host))
  .properties.pks-vrli.enabled.skip_cert_verify:
    value: ((properties.pks-vrli.enabled.skip_cert_verify))
  .properties.pks-vrli.enabled.use_ssl:
    value: ((properties.pks-vrli.enabled.use_ssl))
  .properties.pks-vrops:
    selected_option: ((properties.pks-vrops))
    value: ((properties.pks-vrops))
  .properties.pks_api_hostname:
    value: ((properties.pks_api_hostname))

  .properties.plan1_selector:
    value: ((properties.plan1_selector_value))
  .properties.plan1_selector.active.allow_privileged_containers:
    value: ((properties.plan1_selector.active.allow_privileged_containers))
  .properties.plan1_selector.active.description:
    value: ((properties.plan1_selector.active.description))
  .properties.plan1_selector.active.master_az_placement:
    value:
    - ((properties.plan1_selector.active.master_az_placement))
  .properties.plan1_selector.active.master_instances:
    value: ((properties.plan1_selector.active.master_instances))
  .properties.plan1_selector.active.master_persistent_disk_type:
    value: ((properties.plan1_selector.active.master_persistent_disk_type))
  .properties.plan1_selector.active.max_worker_instances:
    value: ((properties.plan1_selector.active.max_worker_instances))
  .properties.plan1_selector.active.name:
    value: ((properties.plan1_selector.active.name))
  .properties.plan1_selector.active.worker_az_placement:
    value: ((properties.plan1_selector.active.worker_az_placement))
  .properties.plan1_selector.active.worker_instances:
    value: ((properties.plan1_selector.active.worker_instances))
  .properties.plan1_selector.active.allow_privileged_containers:
    value: ((properties.plan1_selector.active.allow_privileged_containers))
  .properties.plan1_selector.active.errand_vm_type:
    value: ((properties.plan1_selector.active.errand_vm_type))
  .properties.plan1_selector.active.master_vm_type:
    value: ((properties.plan1_selector.active.master_vm_type))
  .properties.plan1_selector.active.worker_vm_type:
    value: ((properties.plan1_selector.active.worker_vm_type))

  .properties.plan2_selector:
    value: ((properties.plan2_selector_value))
  .properties.plan2_selector.active.allow_privileged_containers:
    value: ((properties.plan2_selector.active.allow_privileged_containers))
  .properties.plan2_selector.active.description:
    value: ((properties.plan2_selector.active.description))
  .properties.plan2_selector.active.master_az_placement:
    value:
    - ((properties.plan2_selector.active.master_az_placement))
  .properties.plan2_selector.active.master_instances:
    value: ((properties.plan2_selector.active.master_instances))
  .properties.plan2_selector.active.master_persistent_disk_type:
    value: ((properties.plan2_selector.active.master_persistent_disk_type))
  .properties.plan2_selector.active.max_worker_instances:
    value: ((properties.plan2_selector.active.max_worker_instances))
  .properties.plan2_selector.active.name:
    value: ((properties.plan2_selector.active.name))
  .properties.plan2_selector.active.worker_az_placement:
    value: ((properties.plan2_selector.active.worker_az_placement))
  .properties.plan2_selector.active.worker_instances:
    value: ((properties.plan2_selector.active.worker_instances))
  .properties.plan2_selector.active.allow_privileged_containers:
    value: ((properties.plan2_selector.active.allow_privileged_containers))
  .properties.plan2_selector.active.errand_vm_type:
    value: ((properties.plan2_selector.active.errand_vm_type))
  .properties.plan2_selector.active.master_vm_type:
    value: ((properties.plan2_selector.active.master_vm_type))
  .properties.plan2_selector.active.worker_vm_type:
    value: ((properties.plan2_selector.active.worker_vm_type))

  .properties.plan3_selector:
    value: ((properties.plan3_selector_value))
  .properties.plan3_selector.active.allow_privileged_containers:
    value: ((properties.plan3_selector.active.allow_privileged_containers))
  .properties.plan3_selector.active.description:
    value: ((properties.plan3_selector.active.description))
  .properties.plan3_selector.active.master_az_placement:
    value:
    - ((properties.plan3_selector.active.master_az_placement))
  .properties.plan3_selector.active.master_instances:
    value: ((properties.plan3_selector.active.master_instances))
  .properties.plan3_selector.active.master_persistent_disk_type:
    value: ((properties.plan3_selector.active.master_persistent_disk_type))
  .properties.plan3_selector.active.max_worker_instances:
    value: ((properties.plan3_selector.active.max_worker_instances))
  .properties.plan3_selector.active.name:
    value: ((properties.plan3_selector.active.name))
  .properties.plan3_selector.active.worker_az_placement:
    value: ((properties.plan3_selector.active.worker_az_placement))
  .properties.plan3_selector.active.worker_instances:
    value: ((properties.plan3_selector.active.worker_instances))
  .properties.plan3_selector.active.allow_privileged_containers:
    value: ((properties.plan3_selector.active.allow_privileged_containers))
  .properties.plan3_selector.active.errand_vm_type:
    value: ((properties.plan3_selector.active.errand_vm_type))
  .properties.plan3_selector.active.master_vm_type:
    value: ((properties.plan3_selector.active.master_vm_type))
  .properties.plan3_selector.active.worker_vm_type:
    value: ((properties.plan3_selector.active.worker_vm_type))



  .properties.plan4_selector:
    selected_option: inactive
    value: Plan Inactive
  .properties.plan5_selector:
    selected_option: inactive
    value: Plan Inactive
  .properties.plan6_selector:
    selected_option: inactive
    value: Plan Inactive
  .properties.plan7_selector:
    selected_option: inactive
    value: Plan Inactive
  .properties.plan8_selector:
    selected_option: inactive
    value: Plan Inactive
  .properties.plan9_selector:
    selected_option: inactive
    value: Plan Inactive
  .properties.plan10_selector:
    selected_option: inactive
    value: Plan Inactive
  .properties.proxy_selector:
    selected_option: disabled
    value: Disabled
  .properties.syslog_selector:
    selected_option: disabled
    value: disabled
  .properties.telemetry_selector:
    selected_option: disabled
    value: disabled
  .properties.uaa:
    selected_option: internal
    value: internal
  .properties.uaa_oidc:
    value: ((properties.uaa_oidc))
  .properties.uaa_pks_cli_access_token_lifetime:
    value: ((properties.uaa_pks_cli_access_token_lifetime))
  .properties.uaa_pks_cli_refresh_token_lifetime:
    value: ((properties.uaa_pks_cli_refresh_token_lifetime))
  .properties.vm_extensions:
    value:
    - public_ip
  .properties.wavefront:
    value: ((properties.wavefront))
  .properties.worker_max_in_flight:
    value: ((properties.worker_max_in_flight))
network-properties:
  network:
    name: ((network_name))
  other_availability_zones:
  - name: ((az1_name))
  - name: ((az2_name))
  - name: ((az3_name))
  service_network:
    name: ((service_network))
  singleton_availability_zone:
    name: ((singleton_availability_zone))
resource-config:
  pivotal-container-service:
    instances: automatic
    persistent_disk:
      size_mb: ((resource-config.persistent_disk))
    instance_type:
      id: ((resource-config.instance_type))
errand-config:
  delete-all-clusters:
    pre-delete-state: ((errand-config.delete-all-clusters))
  pks-nsx-t-precheck:
    post-deploy-state: ((errand-config.pks-nsx-t-precheck))
  smoke-tests:
    post-deploy-state: ((errand-config.smoke-tests))
  upgrade-all-service-instances:
    post-deploy-state: ((errand-config.update-all-service-instances))
  wavefront-alert-creation:
    post-deploy-state: ((errand-config.wavefront-alert-creation))
  wavefront-alert-deletion:
    pre-delete-state: ((errand-config.wavefront-alert-deletion))
