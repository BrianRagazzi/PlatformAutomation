resource_types:
- name: pivnet
  type: docker-image
  source:
    repository: pivotalcf/pivnet-resource
    tags: latest-final

resources:
- name: platform-automation
  type: pivnet
  source:
    api_token: ((pivnet_token))
    product_slug: platform-automation


- name: opsman-image
  type: s3
  source:
    access_key_id: ((access_key_id))
    secret_access_key: ((secret_access_key))
    endpoint: ((s3.endpoint))
    bucket: ((s3.buckets_pivnet_products))
    skip_ssl_verification: true
    regexp: \[ops-manager,(.*)\].*.ova #regexp: ((opsman_image_s3_versioned_regexp)) # vsphere ex: pcf-vsphere-(.*).ova


- name: pas-stemcell
  type: s3
  source:
    access_key_id: ((access_key_id))
    secret_access_key: ((secret_access_key))
    endpoint: ((s3.endpoint))
    bucket: ((s3.buckets_pivnet_products))
    skip_ssl_verification: true
    regexp: pas-stemcell/\[stemcells-ubuntu-xenial,(.*)\]bosh-stemcell-.*-vsphere.*\.tgz

- name: pas-product
  type: s3
  source:
    access_key_id: ((access_key_id))
    secret_access_key: ((secret_access_key))
    endpoint: ((s3.endpoint))
    bucket: ((s3.buckets_pivnet_products))
    skip_ssl_verification: true
    regexp: \[elastic-runtime,(.*)\]srt-.*.pivotal

- name: healthwatch-stemcell
  type: s3
  source:
    access_key_id: ((access_key_id))
    secret_access_key: ((secret_access_key))
    endpoint: ((s3.endpoint))
    bucket: ((s3.buckets_pivnet_products))
    skip_ssl_verification: true
    regexp: healthwatch-stemcell/\[stemcells-ubuntu-xenial,(.*)\]bosh-stemcell-.*-vsphere.*\.tgz

- name: healthwatch-product
  type: s3
  source:
    access_key_id: ((access_key_id))
    secret_access_key: ((secret_access_key))
    endpoint: ((s3.endpoint))
    bucket: ((s3.buckets_pivnet_products))
    skip_ssl_verification: true
    regexp: \[p-healthwatch,(.*)\]p-healthwatch-.*.pivotal

- name: nsx-product
  type: s3
  source:
    access_key_id: ((access_key_id))
    secret_access_key: ((secret_access_key))
    endpoint: ((s3.endpoint))
    bucket: ((s3.buckets_pivnet_products))
    skip_ssl_verification: true
    regexp: \[vmware-nsx-t,(.*)\]VMware-NSX-T-.*.pivotal

- name: configuration
  type: git
  source:
    uri: ((config_github_repo))
    branch: ((config_github_branch))
    username: ((github_username))
    password: ((github_token))
    paths: ["((foundation))"]

- name: state
  type: git
  source:
    uri: ((config_github_repo))
    branch: ((config_github_branch))
    username: ((github_username))
    password: ((github_token))

- name: custom-tasks
  type: git
  source:
    uri: ((PlatformAutomation_github_repo))
    branch: ((PlatformAutomation_github_branch))
    username: ((github_username))
    password: ((github_token))
    paths: ["tasks"]


# code_snippet multiple-product-interpolate-creds start yaml
# This task is used in multiple jobs
# The yaml anchor "*interpolate-creds" is used in its place
credhub-interpolate: &credhub-interpolate
  image: platform-automation-image
  file: platform-automation-tasks/tasks/credhub-interpolate.yml
  params:
    CREDHUB_CLIENT: ((credhub_client))
    CREDHUB_SECRET: ((credhub_secret))
    CREDHUB_SERVER: ((credhub_server))
    CREDHUB_CA_CERT: ((credhub_ca_cert))
    PREFIX: '/foundation/((foundation))'
    INTERPOLATION_PATHS: "((foundation))/env ((foundation))/vars download-product-configs"
    SKIP_MISSING: true
  input_mapping:
    files: configuration
  output_mapping:
    interpolated-files: interpolated-files


groups:
- name: deploy
  jobs:
  - install-opsman
  - pas
  - nsx
  - healthwatch
  - apply-changes
- name: post-deploy
  jobs:
  - create-org-admin
- name: teardown
  jobs:
  - destroy-installation


jobs:
- name: install-opsman
  serial: true
  serial_groups: [ install ]
  plan:
  - aggregate:
    - get: opsman-image
    - get: configuration
      trigger: false
    - get: state
    - get: platform-automation-image
      resource: platform-automation
      params:
        unpack: true
        globs: ["*image*"]
    - get: platform-automation-tasks
      resource: platform-automation
      params:
        unpack: true
        globs: ["*tasks*"]

  - task: credhub-interpolate
    <<: *credhub-interpolate

  - task: create-vm
    image: platform-automation-image
    file: platform-automation-tasks/tasks/create-vm.yml
    input_mapping:
      state: state
      config: configuration
      vars: interpolated-files
      image: opsman-image
    params:
      STATE_FILE: ((foundation))/state/state.yml
      OPSMAN_CONFIG_FILE: ((foundation))/config/opsman.yml #prepends config/
      VARS_FILES: |
        vars/((foundation))/vars/opsman-defaults.yml vars/((foundation))/vars/opsman-vars.yml

    ensure: &make-state-commit
      do:
        - task: make-commit
          image: platform-automation-image
          file: platform-automation-tasks/tasks/make-git-commit.yml
          input_mapping:
            repository: state
            file-source: generated-state
          output_mapping:
            repository-commit: state-commit
          params:
            FILE_SOURCE_PATH: state.yml
            FILE_DESTINATION_PATH: ((foundation))/state/state.yml
            GIT_AUTHOR_EMAIL: ((github_author_email))
            GIT_AUTHOR_NAME: "Platform Automation"
            COMMIT_MESSAGE: 'Update state file'
        - put: state
          params:
            repository: state-commit
            merge: true

  - task: configure-authentication
    image: platform-automation-image
    file: platform-automation-tasks/tasks/configure-authentication.yml
    attempts: 10
    input_mapping:
      env: interpolated-files
      config: interpolated-files
    params:
      ENV_FILE: ((foundation))/env/env.yml
      AUTH_CONFIG_FILE: ((foundation))/vars/auth.yml
  - task: configure-director
    image: platform-automation-image
    file: platform-automation-tasks/tasks/configure-director.yml
    input_mapping:
      config: configuration
      env: interpolated-files
      vars: interpolated-files
    params:
      ENV_FILE: ((foundation))/env/env.yml
      DIRECTOR_CONFIG_FILE: ((foundation))/config/director.yml
      VARS_FILES: vars/((foundation))/vars/director-defaults.yml vars/((foundation))/vars/director-vars.yml

  - task: apply-director-changes
    image: platform-automation-image
    file: platform-automation-tasks/tasks/apply-director-changes.yml
    input_mapping:
      env: interpolated-files
    params:
      ENV_FILE: ((foundation))/env/env.yml

- name: pas
  serial: false  # try  false 052219
  plan:
  - aggregate:
    - get: configuration
      trigger: true
    - get: pas-product
    - get: pas-stemcell
    - get: healthwatch-stemcell
    - get: platform-automation-image
      passed: [ install-opsman ]
      resource: platform-automation
      params:
        unpack: true
        globs: ["*image*"]
    - get: platform-automation-tasks
      resource: platform-automation
      params:
        unpack: true
        globs: ["*tasks*"]

  - task: credhub-interpolate
    <<: *credhub-interpolate

  - task: upload-product-pas
    image: platform-automation-image
    file: platform-automation-tasks/tasks/upload-product.yml
    input_mapping:
      product: pas-product
      config: configuration
      env: interpolated-files
      vars: interpolated-files
    params:
      ENV_FILE: ((foundation))/env/env.yml

  - task: stage-product-pas
    image: platform-automation-image
    file: platform-automation-tasks/tasks/stage-product.yml
    input_mapping:
      product: pas-product
      env: interpolated-files
    params:
      ENV_FILE: ((foundation))/env/env.yml

  - task: upload-pas-stemcell
    image: platform-automation-image
    file: platform-automation-tasks/tasks/upload-stemcell.yml
    input_mapping:
      env: interpolated-files
      stemcell: pas-stemcell
    params:
      ENV_FILE: ((foundation))/env/env.yml

  - task: upload-healthwatch-stemcell
    image: platform-automation-image
    file: platform-automation-tasks/tasks/upload-stemcell.yml
    input_mapping:
      env: interpolated-files
      stemcell: healthwatch-stemcell
    params:
      ENV_FILE: ((foundation))/env/env.yml

  - task: configure-pas
    image: platform-automation-image
    file: platform-automation-tasks/tasks/configure-product.yml
    input_mapping:
      config: configuration
      env: interpolated-files
      vars: interpolated-files
    params:
      CONFIG_FILE: ((foundation))/config/cf.yml
      VARS_FILES: |
        vars/((foundation))/vars/cf-defaults.yml
        vars/((foundation))/vars/cf-vars.yml
      ENV_FILE: ((foundation))/env/env.yml

- name: nsx
  serial: true
  plan:
  - aggregate:
    - get: nsx-product
    - get: configuration
      trigger: true
    - get: platform-automation-image
      passed: [ pas ]
      resource: platform-automation
      params:
        unpack: true
        globs: ["*image*"]
    - get: platform-automation-tasks
      resource: platform-automation
      params:
        unpack: true
        globs: ["*tasks*"]

  - task: credhub-interpolate
    <<: *credhub-interpolate

  - task: upload-product-nsx
    image: platform-automation-image
    file: platform-automation-tasks/tasks/upload-product.yml
    input_mapping:
      product: nsx-product
      config: configuration
      env: interpolated-files
      vars: interpolated-files
    params:
      ENV_FILE: ((foundation))/env/env.yml

  - task: stage-product-nsx
    image: platform-automation-image
    file: platform-automation-tasks/tasks/stage-product.yml
    input_mapping:
      product: nsx-product
      env: interpolated-files
      vars: interpolated-files
    params:
      ENV_FILE: ((foundation))/env/env.yml

  - task: configure-nsx
    image: platform-automation-image
    file: platform-automation-tasks/tasks/configure-product.yml
    input_mapping:
      config: configuration
      env: interpolated-files
      vars: interpolated-files
    params:
      CONFIG_FILE: ((foundation))/config/nsx.yml
      VARS_FILES: |
        vars/((foundation))/vars/nsx-defaults.yml
        vars/((foundation))/vars/nsx-vars.yml
      ENV_FILE: ((foundation))/env/env.yml

- name: healthwatch
  serial: true
  plan:
  - aggregate:
    - get: healthwatch-product
    - get: configuration
      trigger: true
    - get: platform-automation-image
      passed: [ pas ]
      resource: platform-automation
      params:
        unpack: true
        globs: ["*image*"]
    - get: platform-automation-tasks
      resource: platform-automation
      params:
        unpack: true
        globs: ["*tasks*"]

  - task: credhub-interpolate
    <<: *credhub-interpolate

  - task: upload-product-healthwatch
    image: platform-automation-image
    file: platform-automation-tasks/tasks/upload-product.yml
    input_mapping:
      product: healthwatch-product
      config: configuration
      env: interpolated-files
      vars: interpolated-files
    params:
      ENV_FILE: ((foundation))/env/env.yml

  - task: stage-product-healthwatch
    image: platform-automation-image
    file: platform-automation-tasks/tasks/stage-product.yml
    input_mapping:
      product: healthwatch-product
      env: interpolated-files
    params:
      ENV_FILE: ((foundation))/env/env.yml

  - task: configure-healthwatch
    image: platform-automation-image
    file: platform-automation-tasks/tasks/configure-product.yml
    input_mapping:
      config: configuration
      env: interpolated-files
      vars: interpolated-files
    params:
      CONFIG_FILE: ((foundation))/config/p-healthwatch.yml
      VARS_FILES: |
        vars/((foundation))/vars/p-healthwatch-defaults.yml
        vars/((foundation))/vars/p-healthwatch-vars.yml
      ENV_FILE: ((foundation))/env/env.yml

- name: apply-changes
  serial: true
  plan:
  - aggregate:
    - get: configuration
      trigger: true
      passed: [ nsx, healthwatch ]
    - get: platform-automation-image
      resource: platform-automation
      params:
        unpack: true
        globs: ["*image*"]
    - get: platform-automation-tasks
      resource: platform-automation
      params:
        unpack: true
        globs: ["*tasks*"]

  - task: credhub-interpolate
    <<: *credhub-interpolate

  - task: apply-product-changes
    image: platform-automation-image
    file: platform-automation-tasks/tasks/apply-changes.yml
    input_mapping:
      config: configuration
      env: interpolated-files
    params:
      ENV_FILE: ((foundation))/env/env.yml

- name: create-org-admin
  serial: true
  serial_groups: [ post-deploy ]
  plan:
  - aggregate:
    - get: configuration
      passed: [apply-changes]
      trigger: true
    - get: custom-tasks
    - get: state
    - get: platform-automation-image
      resource: platform-automation
      params:
        unpack: true
        globs: ["*image*"]
    - get: platform-automation-tasks
      resource: platform-automation
      params:
        unpack: true
        globs: ["*tasks*"]

  - task: credhub-interpolate
    <<: *credhub-interpolate

  - task: config-pas-admin-user
    image: platform-automation-image
    file: custom-tasks/tasks/create_pas_org_admin.yml
    input_mapping:
      vars: interpolated-files
      env: interpolated-files
    params:
      ENV_FILE: ((foundation))/env/env.yml
      PAS_ADMIN_USERNAME: ((pas_admin_username))
      PAS_ADMIN_PASSWORD: ((pas_admin_password))
      PAS_ADMIN_ORG: ((pas_admin_org))

- name: destroy-installation
  serial: true
  serial_groups: [ teardown ]
  plan:
  - aggregate:
    - get: configuration
    - get: state
    - get: platform-automation-image
      passed: [apply-changes]
      trigger: false
      resource: platform-automation
      params:
        unpack: true
        globs: ["*image*"]
    - get: platform-automation-tasks
      resource: platform-automation
      params:
        unpack: true
        globs: ["*tasks*"]

  - task: credhub-interpolate
    <<: *credhub-interpolate

  - task: delete-installation
    image: platform-automation-image
    file: platform-automation-tasks/tasks/delete-installation.yml
    input_mapping:
      env: interpolated-files
    params:
      ENV_FILE: ((foundation))/env/env.yml

  - task: delete-opsman-vm
    image: platform-automation-image
    file: platform-automation-tasks/tasks/delete-vm.yml
    input_mapping:
      state: state
      config: configuration
      vars: interpolated-files
      env: interpolated-files
    params:
      STATE_FILE: ((foundation))/state/state.yml
      OPSMAN_CONFIG_FILE: ((foundation))/config/opsman.yml
      VARS_FILES: |
        vars/((foundation))/config/vars/opsman-defaults.yml
        vars/((foundation))/config/vars/opsman-vars.yml
