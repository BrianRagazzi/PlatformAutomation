resource_types:
- name: pivnet
  type: docker-image
  source:
    repository: pivotalcf/pivnet-resource
    tag: latest-final

resources:
- name: healthwatch-product
  type: s3
  source:
    access_key_id: ((s3.access_key_id))
    bucket: ((s3.buckets_pivnet_products))
    region_name: ((s3.region_name))
    endpoint: ((s3.endpoint))
    skip_ssl_verification: true
    secret_access_key: ((s3.secret_access_key))
    regexp: \[p-healthwatch,(.*)\]p-healthwatch-.*.pivotal

- name: healthwatch-stemcell
  type: s3
  source:
    access_key_id: ((s3.access_key_id))
    bucket: ((s3.buckets_pivnet_products))
    region_name: ((s3.region_name))
    endpoint: ((s3.endpoint))
    skip_ssl_verification: true
    secret_access_key: ((s3.secret_access_key))
    regexp: healthwatch-stemcell/\[stemcells-ubuntu-xenial,(.*)\]bosh-stemcell-.*-vsphere.*\.tgz

- name: harbor-product
  type: s3
  source:
    access_key_id: ((s3.access_key_id))
    bucket: ((s3.buckets_pivnet_products))
    region_name: ((s3.region_name))
    endpoint: ((s3.endpoint))
    skip_ssl_verification: true
    secret_access_key: ((s3.secret_access_key))
    regexp: \[harbor-container-registry,(.*)\]harbor-container-registry-.*.pivotal
     # harbor-container-registry-1.7.5-build.11.pivotal

- name: harbor-stemcell
  type: s3
  source:
    access_key_id: ((s3.access_key_id))
    bucket: ((s3.buckets_pivnet_products))
    region_name: ((s3.region_name))
    endpoint: ((s3.endpoint))
    skip_ssl_verification: true
    secret_access_key: ((s3.secret_access_key))
    regexp: harbor-stemcell/\[stemcells-ubuntu-xenial,(.*)\]bosh-stemcell-.*-vsphere.*\.tgz


- name: opsman-product
  type: s3
  source:
    access_key_id: ((s3.access_key_id))
    bucket: ((s3.buckets_pivnet_products))
    region_name: ((s3.region_name))
    endpoint: ((s3.endpoint))
    skip_ssl_verification: true
    secret_access_key: ((s3.secret_access_key))
    regexp: \[ops-manager,(.*)\].*.ova

- name: nsx-product
  type: s3
  source:
    access_key_id: ((s3.access_key_id))
    bucket: ((s3.buckets_pivnet_products))
    region_name: ((s3.region_name))
    endpoint: ((s3.endpoint))
    skip_ssl_verification: true
    secret_access_key: ((s3.secret_access_key))
    regexp: \[vmware-nsx-t,(.*)\]VMware-NSX-T-.*.pivotal

- name: pas-product
  type: s3
  source:
    access_key_id: ((s3.access_key_id))
    bucket: ((s3.buckets_pivnet_products))
    region_name: ((s3.region_name))
    endpoint: ((s3.endpoint))
    skip_ssl_verification: true
    secret_access_key: ((s3.secret_access_key))
    regexp: \[elastic-runtime,(.*)\].*.pivotal
    #regexp: \[elastic-runtime,(.*)\]srt-.*.pivotal

- name: pas-stemcell
  type: s3
  source:
    access_key_id: ((s3.access_key_id))
    bucket: ((s3.buckets_pivnet_products))
    region_name: ((s3.region_name))
    endpoint: ((s3.endpoint))
    skip_ssl_verification: true
    secret_access_key: ((s3.secret_access_key))
    regexp: pas-stemcell/\[stemcells-ubuntu-xenial,(.*)\]bosh-stemcell-.*-vsphere.*\.tgz

- name: pks-product
  type: s3
  source:
    access_key_id: ((s3.access_key_id))
    bucket: ((s3.buckets_pivnet_products))
    region_name: ((s3.region_name))
    endpoint: ((s3.endpoint))
    skip_ssl_verification: true
    secret_access_key: ((s3.secret_access_key))
    regexp: \[pivotal-container-service,(.*)\]pivotal-container-service-.*.pivotal

- name: pks-stemcell
  type: s3
  source:
    access_key_id: ((s3.access_key_id))
    bucket: ((s3.buckets_pivnet_products))
    region_name: ((s3.region_name))
    endpoint: ((s3.endpoint))
    skip_ssl_verification: true
    secret_access_key: ((s3.secret_access_key))
    regexp: pks-stemcell/\[stemcells-ubuntu-xenial,(.*)\]bosh-stemcell-.*-vsphere.*\.tgz

# - name: pas-windows-product
#   type: s3
#   source:
#     access_key_id: ((s3.access_key_id))
#     bucket: ((s3.buckets_pivnet_products))
#     region_name: ((s3.region_name))
#     endpoint: ((s3.endpoint))
#     skip_ssl_verification: true
#     secret_access_key: ((s3.secret_access_key))
#     regexp: \[pas-windows,(.*)\]pas-windows-.*.pivotal
- name: platform-automation-pivnet
  type: pivnet
  source:
    api_token: ((pivnet_token))
    product_slug: platform-automation
    product_version: 3\.(.*)
    sort_by: semver

- name: platform-automation-tasks
  type: s3
  source:
    access_key_id: ((s3.access_key_id))
    bucket: ((s3.buckets_pivnet_products))
    region_name: ((s3.region_name))
    endpoint: ((s3.endpoint))
    skip_ssl_verification: true
    secret_access_key: ((s3.secret_access_key))
    regexp: platform-automation-tasks-(.*).zip

- name: platform-automation-image
  type: s3
  source:
    access_key_id: ((s3.access_key_id))
    bucket: ((s3.buckets_pivnet_products))
    region_name: ((s3.region_name))
    endpoint: ((s3.endpoint))
    skip_ssl_verification: true
    secret_access_key: ((s3.secret_access_key))
    regexp: platform-automation-image-(.*).tgz

- name: config
  type: git
  source:
    uri: ((config_github_repo))
    branch: ((config_github_branch))
    username: ((github_username))
    password: ((github_token))
    paths: ["download-product-configs"]

- name: daily
  type: time
  source:
    interval: 24h

# code_snippet multiple-product-interpolate-creds start yaml
# This task is used in multiple jobs
# The yaml anchor "*interpolate-creds" is used in its place
credhub-interpolate: &credhub-interpolate
  image: platform-automation-image
  file: platform-automation-tasks/tasks/credhub-interpolate.yml
  params:
    CREDHUB_CLIENT: ((credhub_client))
    CREDHUB_SECRET: ((credhub_secret))
    CREDHUB_SERVER: ((credhub_server))
    CREDHUB_CA_CERT: ((credhub_ca_cert))
    PREFIX: '/pipeline/vsphere/'
    INTERPOLATION_PATHS: "download-product-configs"
    SKIP_MISSING: true
  input_mapping:
    files: config
  output_mapping:
    interpolated-files: config

jobs:
- name: fetch-healthwatch
  plan:
  - aggregate:
    - get: daily
      trigger: true
    - get: platform-automation-image
      params:
        unpack: true
    - get: platform-automation-tasks
      params:
        unpack: true
    - get: config
  - task: credhub-interpolate
    <<: *credhub-interpolate
  - task: download-healthwatch-product-and-stemcell
    image: platform-automation-image
    file: platform-automation-tasks/tasks/download-product.yml
    params:
      CONFIG_FILE: download-product-configs/healthwatch.yml
    output_mapping: {downloaded-stemcell: healthwatch-stemcell}
  - aggregate:
    - put: healthwatch-product
      params:
        file: downloaded-product/*.pivotal
    - put: healthwatch-stemcell
      params:
        file: healthwatch-stemcell/*.tgz

- name: fetch-opsman
  plan:
  - aggregate:
    - get: daily
      trigger: true
    - get: platform-automation-image
      params:
        unpack: true
    - get: platform-automation-tasks
      params:
        unpack: true
    - get: config
  - task: credhub-interpolate
    <<: *credhub-interpolate
  - task: download-opsman-image
    image: platform-automation-image
    file: platform-automation-tasks/tasks/download-product.yml
    params:
      CONFIG_FILE: download-product-configs/opsman.yml
  - aggregate:
    - put: opsman-product
      params:
        file: downloaded-product/*

- name: fetch-pas
  plan:
  - aggregate:
    - get: daily
      trigger: true
    - get: platform-automation-image
      params:
        unpack: true
    - get: platform-automation-tasks
      params:
        unpack: true
    - get: config
  - task: credhub-interpolate
    <<: *credhub-interpolate
  - task: download-pas-product-and-stemcell
    image: platform-automation-image
    file: platform-automation-tasks/tasks/download-product.yml
    params:
      CONFIG_FILE: download-product-configs/pas.yml
    output_mapping: {downloaded-stemcell: pas-stemcell}
  - aggregate:
    - put: pas-product
      params:
        file: downloaded-product/*.pivotal
    - put: pas-stemcell
      params:
        file: pas-stemcell/*.tgz

- name: fetch-pks
  plan:
  - aggregate:
      - get: daily
        trigger: true
      - get: platform-automation-image
        params:
          unpack: true
      - get: platform-automation-tasks
        params:
          unpack: true
      - get: config
  - task: credhub-interpolate
    <<: *credhub-interpolate
  - task: download-pks-product-and-stemcell
    image: platform-automation-image
    file: platform-automation-tasks/tasks/download-product.yml
    params:
      CONFIG_FILE: download-product-configs/pks.yml
    output_mapping: {downloaded-stemcell: pks-stemcell}
  - aggregate:
      - put: pks-product
        params:
          file: downloaded-product/*.pivotal
      - put: pks-stemcell
        params:
          file: pks-stemcell/*.tgz

- name: fetch-harbor
  plan:
  - aggregate:
      - get: daily
        trigger: true
      - get: platform-automation-image
        params:
          unpack: true
      - get: platform-automation-tasks
        params:
          unpack: true
      - get: config
  - task: credhub-interpolate
    <<: *credhub-interpolate
  - task: download-harbor-product-and-stemcell
    image: platform-automation-image
    file: platform-automation-tasks/tasks/download-product.yml
    params:
      CONFIG_FILE: download-product-configs/harbor.yml
    output_mapping: {downloaded-stemcell: harbor-stemcell}
  - aggregate:
      - put: harbor-product
        params:
          file: downloaded-product/*.pivotal
      - put: harbor-stemcell
        params:
          file: harbor-stemcell/*.tgz

- name: fetch-nsx
  plan:
  - aggregate:
      - get: daily
        trigger: true
      - get: platform-automation-image
        params:
          unpack: true
      - get: platform-automation-tasks
        params:
          unpack: true
      - get: config
  - task: credhub-interpolate
    <<: *credhub-interpolate
  - task: download-nsx-product
    image: platform-automation-image
    file: platform-automation-tasks/tasks/download-product.yml
    params:
      CONFIG_FILE: download-product-configs/nsx-t.yml
  - aggregate:
      - put: nsx-product
        params:
          file: downloaded-product/*.pivotal


- name: fetch-platform-automation
  # We use the pivnet resource to bootstrap the pipeline,
  # and because this product is part of the pipeline, not the foundation
  plan:
  - get: platform-automation-pivnet
    trigger: true
  - aggregate:
    - put: platform-automation-tasks
      params:
        file: platform-automation-pivnet/*tasks*.zip
    - put: platform-automation-image
      params:
        file: platform-automation-pivnet/*image*.tgz
