---
# code_snippet multiple-product-interpolate-creds start yaml
# This task is used in multiple jobs
# The yaml anchor "*credhub-interpolate" is used in its place
credhub-interpolate: &credhub-interpolate
  image: platform-automation-vsphere-image
  file: platform-automation-tasks/tasks/credhub-interpolate.yml
  params:
    CREDHUB_CLIENT: ((credhub_client))
    CREDHUB_SECRET: ((credhub_secret))
    CREDHUB_SERVER: ((credhub_server))
    CREDHUB_CA_CERT: ((credhub_ca_cert))
    PREFIX: '/concourse/((foundation))'
    INTERPOLATION_PATHS: "((foundation))/env ((foundation))/vars"
    SKIP_MISSING: true
  input_mapping:
    files: config
  # output_mapping:
  #   interpolated-files: config
  output_mapping:
    interpolated-files: interpolated-creds

s3_credentials_binaries: &s3_credentials_binaries
  access_key_id: ((s3_access_key_id))
  secret_access_key: ((s3_secret_access_key))
  endpoint: ((s3_endpoint))
  bucket: ((s3_buckets_pivnet_products))
  region_name: ((s3_region_name))
  skip_ssl_verification: true

resource_types:
- name: pivnet
  type: docker-image
  source:
    repository: pivotalcf/pivnet-resource
    tag: latest-final

resources:
- name: platform-automation-tasks
  type: s3
  source:
    <<: *s3_credentials_binaries
    regexp: platform-automation-tasks-(.*).zip

- name: platform-automation-vsphere-image
  type: s3
  source:
    <<: *s3_credentials_binaries
    regexp: vsphere-platform-automation-image-(.*).tar.gz


- name: custom-task-image
  type: registry-image
  source:
    repository: ((registry_endpoint))/((registry_repo_customtask))
    #username: ((registry_username))
    #password: ((registry_password))
    tag: 'latest'
    insecure: true
    # ca_certs:
    # - ((registry_ca_cert))

- name: config
  type: git
  source:
    uri: ((config_github_repo))
    branch: ((config_github_branch))
    username: ((github_username))
    password: ((github_token))
    paths: ["((foundation))"]

- name: custom-tasks
  type: git
  source:
    uri: ((PlatformAutomation_github_repo))
    branch: ((PlatformAutomation_github_branch))
    username: ((github_username))
    password: ((github_token))
    paths: ["tasks"]

- name: opsman-product
  type: s3
  source:
    <<: *s3_credentials_binaries
    #regexp: \[ops-manager,(.*)\].*.ova #regexp: ((opsman_image_s3_versioned_regexp)) # vsphere ex: pcf-vsphere-(.*).ova
    regexp: ops-manager-vsphere-(.*).ova

- name: pks-product
  type: s3
  source:
    <<: *s3_credentials_binaries
    #regexp: \[pivotal-container-service,(.*)\]pivotal-container-service-.*.pivotal
    regexp: pivotal-container-service-(.*).pivotal

- name: pks-stemcell
  type: s3
  source:
    <<: *s3_credentials_binaries
    #regexp: pks-stemcell/\[stemcells-ubuntu-jammy,(.*)\]bosh-stemcell-.*-vsphere.*\.tgz
    regexp: pks-stemcell/bosh-stemcell-(.*)-vsphere.esxi-ubuntu-jammy-go_agent.tgz
# - name: harbor-stemcell
#   type: s3
#   source:
#     <<: *s3_credentials_binaries
#     regexp: harbor-stemcell/\[stemcells-ubuntu-xenial,(.*)\]bosh-stemcell-.*-vsphere.*\.tgz
#
# - name: harbor-product
#   type: s3
#   source:
#     <<: *s3_credentials_binaries
#     regexp: \[harbor-container-registry,(.*)\]harbor-container-registry-(.*).pivotal

# - name: installation
#   type: s3
#   source:
#     access_key_id: ((access_key_id))
#     secret_access_key: ((secret_access_key))
#     endpoint: ((s3.endpoint))
#     bucket: ((s3.buckets_backup_bucket)) #Different Bucket
#     skip_ssl_verification: true
#     regexp: ((foundation))/installation-(.*).zip
#
# - name: config-backup
#   type: s3
#   source:
#     access_key_id: ((access_key_id))
#     secret_access_key: ((secret_access_key))
#     endpoint: ((s3.endpoint))
#     bucket: ((s3.buckets_backup_bucket)) #Different Bucket
#     skip_ssl_verification: true
#     regexp: ((foundation))/(.*).yml


- name: state
  type: git
  source:
    uri: ((config_github_repo))
    branch: ((config_github_branch))
    username: ((github_username))
    password: ((github_token))



# triggers used to have jobs do something in a timely manner
# - name: one-time-trigger
#   type: time
#   source:
#     interval: 999999h
#
# - name: daily-trigger
#   type: time
#   source:
#     interval: 24h

groups:
- name: deploy
  jobs:
  - create-nsx-objects
  - install-opsman
  - pks
  #- harbor
#   - apply-changes
# - name: post-deploy
#   jobs:
#   - add-pks-admin-group
# - name: save-state
#   jobs:
#   - export-installation
#   - staged-director-config-backup
#   - staged-config-pks-backup
#   - staged-config-harbor-backup
- name: teardown
  jobs:
#  - destroy-installation
  - delete-nsx-objects


jobs:
- name: create-nsx-objects
  serial: true
  build_log_retention:
    builds: 4
  serial_groups: [ install ]
  plan:
  - get: config
  - get: custom-tasks
  - get: custom-task-image
  - get: platform-automation-vsphere-image
    params:
      unpack: true
  - get: platform-automation-tasks
    params:
      unpack: true

  - task: credhub-interpolate
    <<: *credhub-interpolate

  - task: create-objects
    image: custom-task-image
    file: custom-tasks/tasks/configure-nsxt-infra.yml
    input_mapping:
      config: config
      vars: interpolated-creds
      custom-tasks: custom-tasks
    params:
      NSXT_INFRA_CONFIG_FILE: vars/((foundation))/vars/nsx-infra.yml

- name: install-opsman
  serial: true
  serial_groups: [ install ]
  build_log_retention:
    builds: 2
  plan:
  - get: opsman-product
  - get: config
  - get: state
  - get: platform-automation-vsphere-image
    params:
      unpack: true
  - get: platform-automation-tasks
    passed: [create-nsx-objects]
    trigger: true
    params:
      unpack: true

  - task: credhub-interpolate
    <<: *credhub-interpolate

  - task: create-vm
    image: platform-automation-vsphere-image
    file: platform-automation-tasks/tasks/create-vm.yml
    input_mapping:
      state: state
      config: config
      vars: interpolated-creds
      image: opsman-product
    params:
      STATE_FILE: ((foundation))/state/state.yml
      OPSMAN_CONFIG_FILE: ((foundation))/config/opsman.yml #prepends config/
      VARS_FILES: |
        vars/((foundation))/vars/opsman-defaults.yml vars/((foundation))/vars/opsman-vars.yml

    ensure: #&make-state-commit
      do:
        - task: make-commit
          image: platform-automation-vsphere-image
          file: platform-automation-tasks/tasks/make-git-commit.yml
          input_mapping:
            repository: state
            file-source: generated-state
          output_mapping:
            repository-commit: state-commit
          params:
            FILE_SOURCE_PATH: state.yml
            FILE_DESTINATION_PATH: ((foundation))/state/state.yml
            GIT_AUTHOR_EMAIL: ((github_author_email))
            GIT_AUTHOR_NAME: "Platform Automation"
            COMMIT_MESSAGE: 'Update state file'
        - put: state
          params:
            repository: state-commit
            merge: true

  - task: configure-authentication
    image: platform-automation-vsphere-image
    file: platform-automation-tasks/tasks/configure-authentication.yml
    attempts: 10
    input_mapping:
      env: interpolated-creds
      config: interpolated-creds
    params:
      ENV_FILE: ((foundation))/env/env.yml
      AUTH_CONFIG_FILE: ((foundation))/vars/auth.yml
  - task: configure-director
    image: platform-automation-vsphere-image
    file: platform-automation-tasks/tasks/configure-director.yml
    input_mapping:
      config: config
      env: interpolated-creds
      vars: interpolated-creds
    params:
      ENV_FILE: ((foundation))/env/env.yml
      DIRECTOR_CONFIG_FILE: ((foundation))/config/director.yml
      VARS_FILES: vars/((foundation))/vars/director-defaults.yml vars/((foundation))/vars/director-vars.yml

  - task: apply-director-changes
    image: platform-automation-vsphere-image
    file: platform-automation-tasks/tasks/apply-director-changes.yml
    input_mapping:
      env: interpolated-creds
    params:
      ENV_FILE: ((foundation))/env/env.yml

- name: pks
  serial: true
  build_log_retention:
    builds: 2
  plan:
  - get: config
    trigger: true
  - get: pks-product
  - get: pks-stemcell
  # - get: pks-windows-stemcell
  - get: custom-tasks
  - get: custom-task-image
  - get: platform-automation-vsphere-image
    params:
      unpack: true
  - get: platform-automation-tasks
    passed: [install-opsman]
    params:
      unpack: true

  - task: credhub-interpolate
    <<: *credhub-interpolate

  - task: upload-product-pks
    image: platform-automation-vsphere-image
    file: platform-automation-tasks/tasks/upload-product.yml
    input_mapping:
      product: pks-product
      config: config
      env: interpolated-creds
      vars: interpolated-creds
    params:
      ENV_FILE: ((foundation))/env/env.yml

  - task: stage-product-pks
    image: platform-automation-vsphere-image
    file: platform-automation-tasks/tasks/stage-product.yml
    input_mapping:
      product: pks-product
      env: interpolated-creds
    params:
      ENV_FILE: ((foundation))/env/env.yml

  # - task: upload-pks-stemcell
  #   image: platform-automation-vsphere-image
  #   file: platform-automation-tasks/tasks/upload-stemcell.yml
  #   input_mapping:
  #     env: interpolated-creds
  #     stemcell: pks-stemcell
  #   params:
  #     ENV_FILE: ((foundation))/env/env.yml

  # - task: upload-pks-windows-stemcell
  #   image: platform-automation-vsphere-image
  #   file: platform-automation-tasks/tasks/upload-stemcell.yml
  #   input_mapping:
  #     env: interpolated-creds
  #     stemcell: pks-windows-stemcell
  #   params:
  #     ENV_FILE: ((foundation))/env/env.yml

  - task: get_nsx_vars #necessary to obtain the obectids for NSX
    image: custom-task-image
    file: custom-tasks/tasks/create-tkgi-nsx-vars.yml
    input_mapping:
      config: config
      vars: interpolated-creds
      custom-tasks: custom-tasks
    params:
      NSXT_INFRA_CONFIG_FILE: vars/((foundation))/vars/nsx-infra.yml
      PKS_VARS_FILE: vars/((foundation))/vars/tkgi-vars.yml
      NSX_VARS_FILE:  vars/((foundation))/vars/tkgi-nsx-vars.yml
    output_mapping:
      vars: interpolated-creds

  - task: configure-pks
    image: platform-automation-vsphere-image
    file: platform-automation-tasks/tasks/configure-product.yml
    input_mapping:
      config: config
      env: interpolated-creds
      vars: interpolated-creds
    params:
      CONFIG_FILE: ((foundation))/config/tkgi.yml #pks.yml
      VARS_FILES: |
        vars/((foundation))/vars/tkgi-defaults.yml
        vars/((foundation))/vars/tkgi-vars.yml
        vars/((foundation))/vars/tkgi-nsx-vars.yml
      ENV_FILE: ((foundation))/env/env.yml

  - task: assign-pks-stecmcells
    image: platform-automation-vsphere-image
    file: platform-automation-tasks/tasks/assign-multi-stemcell.yml
    input_mapping:
      config: config
      env: interpolated-creds
    params:
      CONFIG_FILE: ((foundation))/config/pks-stemcells.yml
      ENV_FILE: ((foundation))/env/env.yml

# - name: harbor
#   serial: true
#   build_log_retention:
#     builds: 2
#   plan:
#   - aggregate:
#     - get: harbor-product
#     - get: harbor-stemcell
#     - get: config
#       trigger: true
#     - get: platform-automation-vsphere-image
#       params:
#         unpack: true
#     - get: platform-automation-tasks
#       passed: [install-opsman]
#       params:
#         unpack: true
#
#   - task: credhub-interpolate
#     <<: *credhub-interpolate
#
#   - task: upload-product-harbor
#     image: platform-automation-vsphere-image
#     file: platform-automation-tasks/tasks/upload-product.yml
#     input_mapping:
#       product: harbor-product
#       config: config
#       download-config: *credhub-interpolate
#       env: interpolated-creds
#     params:
#       ENV_FILE: ((foundation))/env/env.yml
#
#   - task: stage-product-harbor
#     image: platform-automation-vsphere-image
#     file: platform-automation-tasks/tasks/stage-product.yml
#     input_mapping:
#       product: harbor-product
#       config: *credhub-interpolate
#       download-config: *credhub-interpolate
#       env: interpolated-creds
#       secrets: interpolated-creds
#     params:
#       ENV_FILE: ((foundation))/env/env.yml
#
#   - task: upload-harbor-stemcell
#     image: platform-automation-vsphere-image
#     file: platform-automation-tasks/tasks/upload-stemcell.yml
#     input_mapping:
#       env: interpolated-creds
#       stemcell: harbor-stemcell
#     params:
#       ENV_FILE: ((foundation))/env/env.yml
#
#   - task: configure-harbor
#     image: platform-automation-vsphere-image
#     file: platform-automation-tasks/tasks/configure-product.yml
#     input_mapping:
#       config: *credhub-interpolate
#       env: interpolated-creds
#       vars: interpolated-creds
#     params:
#       CONFIG_FILE: ((foundation))/config/harbor.yml
#       VARS_FILES: |
#         vars/((foundation))/vars/harbor-defaults.yml
#         vars/((foundation))/vars/harbor-vars.yml
#       ENV_FILE: ((foundation))/env/env.yml

# - name: apply-changes
#   serial: true
#   build_log_retention:
#     builds: 2
#   plan:
#   - aggregate:
#     - get: *credhub-interpolate
#       trigger: true
#       #passed: [ pks, harbor ]
#       passed: [ pks ]
#     - get: platform-automation-vsphere-image
#       params:
#         unpack: true
#     - get: platform-automation-tasks
#       params:
#         unpack: true
#
#   - task: credhub-interpolate
#     <<: *credhub-interpolate
#
#   - task: apply-product-changes
#     image: platform-automation-vsphere-image
#     file: platform-automation-tasks/tasks/apply-changes.yml
#     input_mapping:
#       config: *credhub-interpolate
#       env: interpolated-creds
#     params:
#       ENV_FILE: ((foundation))/env/env.yml
#
# - name: export-installation
#   build_log_retention:
#     builds: 2
#   serial: true
#   plan:
#     - aggregate:
#         - get: one-time-trigger
#         - get: daily-trigger
#           trigger: true
#         - get: platform-automation-vsphere-image
#           params:
#             unpack: true
#         - get: platform-automation-tasks
#           params:
#             unpack: true
#         - get: *credhub-interpolate
#     - task: credhub-interpolate
#       <<: *credhub-interpolate
#     - task: export-installation
#       image: platform-automation-vsphere-image
#       file: platform-automation-tasks/tasks/export-installation.yml
#       input_mapping:
#         env: interpolated-creds
#       params:
#         ENV_FILE: ((foundation))/env/env.yml
#         INSTALLATION_FILE: installation-$timestamp.zip
#     - put: installation
#       params:
#         file: installation/installation*.zip
#
# - name: staged-director-config-backup
#   build_log_retention:
#     builds: 2
#   plan:
#   - get: platform-automation-tasks
#     params: {unpack: true}
#     trigger: true
#     passed:
#       - export-installation
#   - get: platform-automation-vsphere-image
#     params: {unpack: true}
#   - get: *credhub-interpolate
#   - task: credhub-interpolate
#     <<: *credhub-interpolate
#   - task: staged-director-config
#     image: platform-automation-vsphere-image
#     file: platform-automation-tasks/tasks/staged-director-config.yml
#     input_mapping:
#       env: interpolated-creds
#     params:
#       ENV_FILE: ((foundation))/env/env.yml
#   - put: config-backup
#     params:
#       file: generated-config/*.yml
#
# - name: staged-config-pks-backup
#   build_log_retention:
#     builds: 2
#   plan:
#   - get: platform-automation-tasks
#     params: {unpack: true}
#     trigger: true
#     passed:
#       - export-installation
#   - get: platform-automation-vsphere-image
#     params: {unpack: true}
#   - get: *credhub-interpolate
#   - task: credhub-interpolate
#     <<: *credhub-interpolate
#   - task: staged-pks-config
#     image: platform-automation-vsphere-image
#     file: platform-automation-tasks/tasks/staged-config.yml
#     input_mapping:
#       env: interpolated-creds
#     params:
#       PRODUCT_NAME: pivotal-container-service
#       ENV_FILE: ((foundation))/env/env.yml
#   - put: config-backup
#     params:
#       file: generated-config/*.yml
#
# - name: staged-config-harbor-backup
#   build_log_retention:
#     builds: 2
#   plan:
#   - get: platform-automation-tasks
#     params: {unpack: true}
#     trigger: true
#     passed:
#       - export-installation
#   - get: platform-automation-vsphere-image
#     params: {unpack: true}
#   - get: *credhub-interpolate
#   - task: credhub-interpolate
#     <<: *credhub-interpolate
#   - task: staged-pks-config
#     image: platform-automation-vsphere-image
#     file: platform-automation-tasks/tasks/staged-config.yml
#     input_mapping:
#       env: interpolated-creds
#     params:
#       PRODUCT_NAME: harbor-container-registry
#       ENV_FILE: ((foundation))/env/env.yml
#   - put: config-backup
#     params:
#       file: generated-config/*.yml
#
# - name: add-pks-admin-group
#   serial: true
#   serial_groups: [ post-deploy ]
#   build_log_retention:
#     builds: 2
#   plan:
#   - aggregate:
#     - get: *credhub-interpolate
#     - get: custom-tasks
#     - get: custom-task-image
#     - get: platform-automation-vsphere-image
#       passed: [apply-changes]
#       trigger: true
#       params:
#         unpack: true
#     - get: platform-automation-tasks
#       params:
#         unpack: true
#
#   - task: credhub-interpolate
#     <<: *credhub-interpolate
#
#   - task: config-pks-admin-group
#     image: custom-task-image
#     file: custom-tasks/tasks/create_pks_admin_ldap_group_maps.yml
#     input_mapping:
#       config: interpolated-creds #Note this is different
#       env: interpolated-creds
#     params:
#       CONFIG_FILE: ((foundation))/vars/pks-vars.yml  #Note this is different
#       ENV_FILE: ((foundation))/env/env.yml
#
# - name: destroy-installation
#   serial: true
#   serial_groups: [ teardown ]
#   build_log_retention:
#     builds: 2
#   plan:
#   - aggregate:
#     - get: *credhub-interpolate
#     - get: state
#     - get: platform-automation-vsphere-image
#       passed: [apply-changes]
#       trigger: false
#       params:
#         unpack: true
#     - get: platform-automation-tasks
#       params:
#         unpack: true
#
#   - task: credhub-interpolate
#     <<: *credhub-interpolate
#
#   - task: delete-installation
#     image: platform-automation-vsphere-image
#     file: platform-automation-tasks/tasks/delete-installation.yml
#     input_mapping:
#       env: interpolated-creds
#     params:
#       ENV_FILE: ((foundation))/env/env.yml
#
#   - task: delete-opsman-vm
#     image: platform-automation-vsphere-image
#     file: platform-automation-tasks/tasks/delete-vm.yml
#     input_mapping:
#       state: state
#       config: *credhub-interpolate
#       vars: interpolated-creds
#       env: interpolated-creds
#     params:
#       STATE_FILE: ((foundation))/state/state.yml
#       OPSMAN_CONFIG_FILE: ((foundation))/config/opsman.yml
#       VARS_FILES: |
#         vars/((foundation))/vars/opsman-defaults.yml
#         vars/((foundation))/vars/opsman-vars.yml
#
- name: delete-nsx-objects
  serial: true
  build_log_retention:
    builds: 4
  serial_groups: [ install ]
  plan:
  - get: config
  - get: custom-tasks
  - get: custom-task-image
  - get: platform-automation-vsphere-image
    params:
      unpack: true
  - get: platform-automation-tasks
    params:
      unpack: true

  - task: credhub-interpolate
    <<: *credhub-interpolate

  - task: delete-objects
    image: custom-task-image
    file: custom-tasks/tasks/delete-nsxt-infra.yml
    input_mapping:
      config: config
      vars: interpolated-creds
      custom-tasks: custom-tasks
    params:
      NSXT_INFRA_CONFIG_FILE: vars/((foundation))/vars/nsx-infra.yml
