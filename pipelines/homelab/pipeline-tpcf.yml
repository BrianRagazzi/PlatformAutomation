---
# code_snippet multiple-product-credhub-interpolate start yaml
# This task is used in multiple jobs
# The yaml anchor "*credhub-interpolate" is used in its place
credhub-interpolate: &credhub-interpolate
  image: platform-automation-vsphere-image
  file: platform-automation-tasks/tasks/credhub-interpolate.yml
  params:
    CREDHUB_CLIENT: ((credhub_client))
    CREDHUB_SECRET: ((credhub_secret))
    CREDHUB_SERVER: ((credhub_server))
    CREDHUB_CA_CERT: ((credhub_ca_cert))
    PREFIX: '/concourse/((foundation))'
    INTERPOLATION_PATHS: "((foundation))/env ((foundation))/vars"
    SKIP_MISSING: true
  input_mapping:
    files: config
  # output_mapping:
  #   interpolated-files: config
  output_mapping:
    interpolated-files: interpolated-creds

s3_credentials_binaries: &s3_credentials_binaries
  access_key_id: ((s3_access_key_id))
  secret_access_key: ((s3_secret_access_key))
  endpoint: ((s3_endpoint))
  bucket: ((s3_buckets_pivnet_products))
  region_name: ((s3_region_name))
  skip_ssl_verification: true

resource_types:
- name: pivnet
  type: docker-image
  source:
    repository: pivotalcf/pivnet-resource
    tags: latest-final

resources:
- name: platform-automation-tasks
  type: s3
  source:
    <<: *s3_credentials_binaries
    regexp: platform-automation-tasks-(.*).zip

- name: platform-automation-vsphere-image
  type: s3
  source:
    <<: *s3_credentials_binaries
    regexp: vsphere-platform-automation-image-(.*).tar.gz

- name: custom-task-image
  type: registry-image
  source:
    repository: ((registry_endpoint))/((registry_repo_customtask))
    #username: ((registry_username))
    #password: ((registry_password))
    tag: 'latest'
    insecure: true
    # ca_certs:
    # - ((registry_ca_cert))

- name: config
  type: git
  source:
    uri: ((config_github_repo))
    branch: ((config_github_branch))
    username: ((github_username))
    password: ((github_token))
    paths: [ "((foundation))" ]

- name: custom-tasks
  type: git
  source:
    uri: ((PlatformAutomation_github_repo))
    branch: ((PlatformAutomation_github_branch))
    username: ((github_username))
    password: ((github_token))
    paths: [ "tasks" ]

- name: opsman-product
  type: s3
  source:
    <<: *s3_credentials_binaries
    #regexp: \[ops-manager,(.*)\].*.ova #regexp: ((opsman_image_s3_versioned_regexp)) # vsphere ex: pcf-vsphere-(.*).ova
    regexp: ops-manager-vsphere-(.*).ova

- name: pas-product
  type: s3
  source:
    <<: *s3_credentials_binaries
    #regexp: \[elastic-runtime,(.*)\]srt-.*.pivotal
    regexp: srt-(.*).pivotal
    # regexp: \[elastic-runtime,(.*)\]cf-.*.pivotal

- name: pas-stemcell
  type: s3
  source:
    <<: *s3_credentials_binaries
    regexp: pas-stemcell/bosh-stemcell-(.*)-vsphere.esxi-ubuntu-jammy-go_agent.tgz

# - name: healthwatch-stemcell
#   type: s3
#   source:
#     <<: *s3_credentials_binaries
#     regexp: healthwatch-stemcell/\[stemcells-ubuntu-xenial,(.*)\]bosh-stemcell-.*-vsphere.*\.tgz
#
- name: healthwatch-product
  type: s3
  source:
    <<: *s3_credentials_binaries
    #regexp: healthwatch-2(.*).pivotal
    regexp: healthwatch-(\d.*).pivotal

- name: healthwatch-pas-exporter
  type: s3
  source:
    <<: *s3_credentials_binaries
    regexp: healthwatch-pas-exporter-(.*).pivotal

- name: nsx-product
  type: s3
  source:
    <<: *s3_credentials_binaries
    regexp: VMware-NSX-T-(.*).pivotal

- name: postgres-product
  type: s3
  source:
    <<: *s3_credentials_binaries
    regexp: postgres-(.*).pivotal

- name: genai-product
  type: s3
  source:
    <<: *s3_credentials_binaries
    regexp: genai-(.*).pivotal

- name: valkey-product
  type: s3
  source:
    <<: *s3_credentials_binaries
    regexp: p-valkey-(.*).pivotal

- name: pivotal-sso-product
  type: s3
  source:
    <<: *s3_credentials_binaries
    regexp: Pivotal_Single_Sign-On_Service_(\d.*).pivotal

- name: spring-cloud-gateway-product
  type: s3
  source:
    <<: *s3_credentials_binaries
    regexp: p_spring-cloud-gateway-service-(\d.*).pivotal   

- name: spring-cloud-services-product
  type: s3
  source:
    <<: *s3_credentials_binaries
    regexp: p_spring-cloud-services-(\d.*).pivotal   

# - name: mysql-stemcell
#   type: s3
#   source:
#     <<: *s3_credentials_binaries
#     regexp: mysql-stemcell/\[stemcells-ubuntu-xenial,(.*)\]bosh-stemcell-.*-vsphere.*\.tgz
#
# - name: mysql-product
#   type: s3
#   source:
#     <<: *s3_credentials_binaries
#     regexp: \[pivotal-mysql,(.*)\]pivotal-mysql-.*.pivotal

# - name: pas-windows-product
#   type: s3
#   source:
#     <<: *s3_credentials_binaries
#     regexp: \[pas-windows,(.*)\]pas-windows-.*.pivotal
#
# - name: pas-windows-stemcell
#   type: s3
#   source:
#     <<: *s3_credentials_binaries
#     regexp: pas-windows-stemcell/\[stemcells-windows-server,(.*)\]bosh-stemcell-.*-vsphere.*\.tgz


- name: installation
  type: s3
  source:
    access_key_id: ((s3_access_key_id))
    secret_access_key: ((s3_secret_access_key))
    endpoint: ((s3_endpoint))
    region_name: ((s3_region_name))
    skip_ssl_verification: true
    bucket: ((s3_buckets_backup_bucket)) #Different Bucket
    regexp: ((foundation))/installation-(.*).zip

- name: config-backup
  type: s3
  source:
    access_key_id: ((s3_access_key_id))
    secret_access_key: ((s3_secret_access_key))
    endpoint: ((s3_endpoint))
    region_name: ((s3_region_name))
    skip_ssl_verification: true
    bucket: ((s3_buckets_backup_bucket)) #Backup Bucket
    regexp: ((foundation))/(.*).yml

- name: state
  type: git
  source:
    uri: ((config_github_repo))
    branch: ((config_github_branch))
    username: ((github_username))
    password: ((github_token))

# triggers used to have jobs do something in a timely manner
- name: one-time-trigger
  type: time
  source:
    interval: 999999h

- name: daily-trigger
  type: time
  source:
    interval: 24h

groups:
- name: deploy
  jobs:
  - create-nsx-objects
  - install-opsman
  - cf
  # - pas-windows
  - nsx
  - postgres
  # - mysql
  - apply-changes
  # - genai
  - valkey
  - sso
  - spring-cloud-gateway
  - spring-cloud-services
  #- apply-changes-again
  # - name: post-deploy
  #   jobs:
  #   #- create-org-admin
  #   - add-pas-admin-group
  - update-errands-cf
  - update-errands-valkey
  #- update-errands-genai
  - apply-changes-errands
  - genai
  - apply-changes-genai
- name: save-state
  jobs:
  - export-installation
  - staged-director-config-backup
  - staged-config-pas-backup
  - staged-config-nsxt-backup
  - staged-config-postgres-backup
  - staged-config-genai-backup
  - staged-config-redis-backup
# #  - staged-config-pasw-backup
#   # - staged-config-healthwatch-backup
#   # - staged-config-mysql-backup
  - staged-config-nsxt-backup
- name: teardown
  jobs:
  - destroy-installation
  - delete-nsx-objects
- name: healthwatch
  jobs:
  - healthwatch
  - apply-changes-healthwatch
  

jobs:
- name: create-nsx-objects
  serial: true
  build_log_retention:
    builds: 2
  serial_groups: [ install ]
  plan:
  - get: config
  - get: custom-tasks
  - get: custom-task-image
  - get: platform-automation-vsphere-image
    params:
      unpack: true
  - get: platform-automation-tasks
    params:
      unpack: true

  - task: credhub-interpolate
    <<: *credhub-interpolate

  - task: create-objects
    image: custom-task-image
    file: custom-tasks/tasks/configure-nsxt-infra.yml
    input_mapping:
      config: config
      vars: interpolated-creds
      custom-tasks: custom-tasks
    params:
      NSXT_INFRA_CONFIG_FILE: vars/((foundation))/vars/nsx-infra.yml

- name: install-opsman
  serial: true
  serial_groups: [ install ]
  build_log_retention:
    builds: 2
  plan:
  - get: opsman-product
  - get: config
  - get: state
  - get: platform-automation-vsphere-image
    params:
      unpack: true
  - get: platform-automation-tasks
    passed: [ create-nsx-objects ]
    trigger: true
    params:
      unpack: true

  - task: credhub-interpolate
    <<: *credhub-interpolate

  - task: create-vm
    image: platform-automation-vsphere-image
    file: platform-automation-tasks/tasks/create-vm.yml
    input_mapping:
      state: state
      config: config
      vars: interpolated-creds
      image: opsman-product
    params:
      STATE_FILE: ((foundation))/state/state.yml
      OPSMAN_CONFIG_FILE: ((foundation))/config/opsman.yml #prepends config/
      VARS_FILES: |
        vars/((foundation))/vars/opsman-defaults.yml vars/((foundation))/vars/opsman-vars.yml

    ensure:
      #&make-state-commit
      do:
      - task: make-commit
        image: platform-automation-vsphere-image
        file: platform-automation-tasks/tasks/make-git-commit.yml
        input_mapping:
          repository: state
          file-source: generated-state
        output_mapping:
          repository-commit: state-commit
        params:
          FILE_SOURCE_PATH: state.yml
          FILE_DESTINATION_PATH: ((foundation))/state/state.yml
          GIT_AUTHOR_EMAIL: ((github_author_email))
          GIT_AUTHOR_NAME: "Platform Automation"
          COMMIT_MESSAGE: 'Update state file'
      - put: state
        params:
          repository: state-commit
          merge: true

  - task: configure-authentication
    image: platform-automation-vsphere-image
    file: platform-automation-tasks/tasks/configure-authentication.yml
    attempts: 10
    input_mapping:
      env: interpolated-creds
      config: interpolated-creds
    params:
      ENV_FILE: ((foundation))/env/env.yml
      AUTH_CONFIG_FILE: ((foundation))/vars/auth.yml
  - task: configure-director
    image: platform-automation-vsphere-image
    file: platform-automation-tasks/tasks/configure-director.yml
    input_mapping:
      config: config
      env: interpolated-creds
      vars: interpolated-creds
    params:
      ENV_FILE: ((foundation))/env/env.yml
      DIRECTOR_CONFIG_FILE: ((foundation))/config/director.yml
      VARS_FILES: vars/((foundation))/vars/director-defaults.yml vars/((foundation))/vars/director-vars.yml

  - task: apply-director-changes
    image: platform-automation-vsphere-image
    file: platform-automation-tasks/tasks/apply-director-changes.yml
    input_mapping:
      env: interpolated-creds
    params:
      ENV_FILE: ((foundation))/env/env.yml

- name: cf
  serial: false # try  false 052219
  build_log_retention:
    builds: 2
  plan:
  - get: config
    trigger: true
  - get: pas-product
  - get: pas-stemcell
  - get: platform-automation-vsphere-image
    passed: [ install-opsman ]
    params:
      unpack: true
  - get: platform-automation-tasks
    params:
      unpack: true

  - task: credhub-interpolate
    <<: *credhub-interpolate

  - task: upload-product
    image: platform-automation-vsphere-image
    file: platform-automation-tasks/tasks/upload-product.yml
    input_mapping:
      product: pas-product
      config: config
      env: interpolated-creds
      vars: interpolated-creds
    params:
      ENV_FILE: ((foundation))/env/env.yml

  - task: stage-product
    image: platform-automation-vsphere-image
    file: platform-automation-tasks/tasks/stage-product.yml
    input_mapping:
      product: pas-product
      env: interpolated-creds
    params:
      ENV_FILE: ((foundation))/env/env.yml

  - task: upload-stemcell
    image: platform-automation-vsphere-image
    file: platform-automation-tasks/tasks/upload-stemcell.yml
    input_mapping:
      env: interpolated-creds
      stemcell: pas-stemcell
    params:
      ENV_FILE: ((foundation))/env/env.yml

  - task: configure-product
    image: platform-automation-vsphere-image
    file: platform-automation-tasks/tasks/configure-product.yml
    input_mapping:
      config: config
      env: interpolated-creds
      vars: interpolated-creds
    params:
      CONFIG_FILE: ((foundation))/config/cf.yml
      VARS_FILES: |
        vars/((foundation))/vars/cf-defaults.yml
        vars/((foundation))/vars/cf-vars.yml
      ENV_FILE: ((foundation))/env/env.yml

# - name: pas-windows
#   serial: true
#   plan:
#     - aggregate:
#         - get: platform-automation-vsphere-image
#           params:
#             unpack: true
#           passed:
#             - pas
#           trigger: true
#         - get: platform-automation-tasks
#           params:
#             unpack: true
#         - get: pas-windows-product
#         - get: pas-windows-stemcell
#         - get: config
#     - task: credhub-interpolate
#       <<: *credhub-interpolate
#     - task: upload-product
#       image: platform-automation-vsphere-image
#       file: platform-automation-tasks/tasks/upload-product.yml
#       input_mapping:
#         product: pas-windows-product
#         env: interpolated-creds
#       params:
#         ENV_FILE: ((foundation))/env/env.yml
#     - task: upload-pas-windows-stemcell
#       image: platform-automation-vsphere-image
#       file: platform-automation-tasks/tasks/upload-stemcell.yml
#       input_mapping:
#         env: interpolated-creds
#         stemcell: pas-windows-stemcell
#       params:
#         ENV_FILE: ((foundation))/env/env.yml
#     - task: stage-product
#       image: platform-automation-vsphere-image
#       file: platform-automation-tasks/tasks/stage-product.yml
#       input_mapping:
#         product: pas-windows-product
#         env: interpolated-creds
#       params:
#         ENV_FILE: ((foundation))/env/env.yml
#     - task: configure-pas
#       image: platform-automation-vsphere-image
#       file: platform-automation-tasks/tasks/configure-product.yml
#       input_mapping:
#         config: config
#         env: interpolated-creds
#         vars: interpolated-creds
#       params:
#         CONFIG_FILE: ((foundation))/config/pas-windows.yml
#         VARS_FILES: |
#           vars/((foundation))/vars/pas-windows-defaults.yml
#           vars/((foundation))/vars/pas-windows-vars.yml
#         ENV_FILE: ((foundation))/env/env.yml

- name: nsx
  serial: true
  build_log_retention:
    builds: 2
  plan:
  - get: nsx-product
  - get: config
    trigger: true
  - get: platform-automation-vsphere-image
    passed: [ install-opsman ]
    params:
      unpack: true
  - get: platform-automation-tasks
    params:
      unpack: true

  - task: credhub-interpolate
    <<: *credhub-interpolate

  - task: upload-product
    image: platform-automation-vsphere-image
    file: platform-automation-tasks/tasks/upload-product.yml
    input_mapping:
      product: nsx-product
      config: config
      env: interpolated-creds
      vars: interpolated-creds
    params:
      ENV_FILE: ((foundation))/env/env.yml

  - task: stage-product
    image: platform-automation-vsphere-image
    file: platform-automation-tasks/tasks/stage-product.yml
    input_mapping:
      product: nsx-product
      env: interpolated-creds
      vars: interpolated-creds
    params:
      ENV_FILE: ((foundation))/env/env.yml

  - task: configure-product
    image: platform-automation-vsphere-image
    file: platform-automation-tasks/tasks/configure-product.yml
    input_mapping:
      config: config
      env: interpolated-creds
      vars: interpolated-creds
    params:
      CONFIG_FILE: ((foundation))/config/nsx.yml
      VARS_FILES: |
        vars/((foundation))/vars/nsx-defaults.yml
        vars/((foundation))/vars/nsx-vars.yml
      ENV_FILE: ((foundation))/env/env.yml

- name: healthwatch
  serial: true
  build_log_retention:
    builds: 4
  plan:
  - get: healthwatch-product
  - get: healthwatch-pas-exporter
  - get: config
    trigger: false #true
  - get: platform-automation-vsphere-image
    passed: [ cf, nsx ]
    params:
      unpack: true
  - get: platform-automation-tasks
    params:
      unpack: true

  - task: credhub-interpolate
    <<: *credhub-interpolate

  - task: upload-product
    image: platform-automation-vsphere-image
    file: platform-automation-tasks/tasks/upload-product.yml
    input_mapping:
      product: healthwatch-product
      config: config
      env: interpolated-creds
      vars: interpolated-creds
    params:
      ENV_FILE: ((foundation))/env/env.yml

  - task: stage-product
    image: platform-automation-vsphere-image
    file: platform-automation-tasks/tasks/stage-product.yml
    input_mapping:
      product: healthwatch-product
      env: interpolated-creds
    params:
      ENV_FILE: ((foundation))/env/env.yml

  - task: configure-product
    image: platform-automation-vsphere-image
    file: platform-automation-tasks/tasks/configure-product.yml
    input_mapping:
      config: config
      env: interpolated-creds
      vars: interpolated-creds
    params:
      CONFIG_FILE: ((foundation))/config/healthwatch.yml
      VARS_FILES: |
        vars/((foundation))/vars/healthwatch-defaults.yml
        vars/((foundation))/vars/healthwatch-vars.yml
      ENV_FILE: ((foundation))/env/env.yml

  - task: upload-product-healthwatch-pas-exporter
    image: platform-automation-vsphere-image
    file: platform-automation-tasks/tasks/upload-product.yml
    input_mapping:
      product: healthwatch-pas-exporter
      config: config
      env: interpolated-creds
      vars: interpolated-creds
    params:
      ENV_FILE: ((foundation))/env/env.yml

  - task: stage-product-healthwatch-pas-exporter
    image: platform-automation-vsphere-image
    file: platform-automation-tasks/tasks/stage-product.yml
    input_mapping:
      product: healthwatch-pas-exporter
      env: interpolated-creds
    params:
      ENV_FILE: ((foundation))/env/env.yml

  - task: configure-healthwatch-pas-exporter
    image: platform-automation-vsphere-image
    file: platform-automation-tasks/tasks/configure-product.yml
    input_mapping:
      config: config
      env: interpolated-creds
      vars: interpolated-creds
    params:
      CONFIG_FILE: ((foundation))/config/hw-pas-exporter.yml
      VARS_FILES: |
        vars/((foundation))/vars/hw-pas-exporter-defaults.yml
        vars/((foundation))/vars/hw-pas-exporter-vars.yml
      ENV_FILE: ((foundation))/env/env.yml

- name: postgres
  serial: true
  build_log_retention:
    builds: 2
  plan:
  - get: postgres-product
  - get: config
    trigger: true
  - get: platform-automation-vsphere-image
    passed: [ cf, nsx ]
    params:
      unpack: true
  - get: platform-automation-tasks
    params:
      unpack: true

  - task: credhub-interpolate
    <<: *credhub-interpolate

  - task: upload-product
    image: platform-automation-vsphere-image
    file: platform-automation-tasks/tasks/upload-product.yml
    input_mapping:
      product: postgres-product
      config: config
      env: interpolated-creds
      vars: interpolated-creds
    params:
      ENV_FILE: ((foundation))/env/env.yml

  - task: stage-product
    image: platform-automation-vsphere-image
    file: platform-automation-tasks/tasks/stage-product.yml
    input_mapping:
      product: postgres-product
      env: interpolated-creds
      vars: interpolated-creds
    params:
      ENV_FILE: ((foundation))/env/env.yml

  - task: configure-product
    image: platform-automation-vsphere-image
    file: platform-automation-tasks/tasks/configure-product.yml
    input_mapping:
      config: config
      env: interpolated-creds
      vars: interpolated-creds
    params:
      CONFIG_FILE: ((foundation))/config/postgres.yml
      VARS_FILES: |
        vars/((foundation))/vars/postgres-defaults.yml
        vars/((foundation))/vars/postgres-vars.yml
      ENV_FILE: ((foundation))/env/env.yml

- name: sso
  serial: true
  build_log_retention:
    builds: 2
  plan:
  - get: pivotal-sso-product
  - get: config
    trigger: true
  - get: platform-automation-vsphere-image
    passed: [ cf, nsx ]
    params:
      unpack: true
  - get: platform-automation-tasks
    params:
      unpack: true

  - task: credhub-interpolate
    <<: *credhub-interpolate

  - task: upload-product
    image: platform-automation-vsphere-image
    file: platform-automation-tasks/tasks/upload-product.yml
    input_mapping:
      product: pivotal-sso-product
      config: config
      env: interpolated-creds
      vars: interpolated-creds
    params:
      ENV_FILE: ((foundation))/env/env.yml

  - task: stage-product
    image: platform-automation-vsphere-image
    file: platform-automation-tasks/tasks/stage-product.yml
    input_mapping:
      product: pivotal-sso-product
      env: interpolated-creds
      vars: interpolated-creds
    params:
      ENV_FILE: ((foundation))/env/env.yml

  - task: configure-product
    image: platform-automation-vsphere-image
    file: platform-automation-tasks/tasks/configure-product.yml
    input_mapping:
      config: config
      env: interpolated-creds
      vars: interpolated-creds
    params:
      CONFIG_FILE: ((foundation))/config/pivotal-sso.yml
      VARS_FILES: |
        vars/((foundation))/vars/pivotal-sso-defaults.yml
        vars/((foundation))/vars/pivotal-sso-vars.yml
      ENV_FILE: ((foundation))/env/env.yml


# - name: mysql
#   serial: true
#   build_log_retention:
#     builds: 4
#   plan:
#   - aggregate:
#     - get: mysql-product
#     - get: mysql-stemcell
#     - get: config
#       trigger: true
#     - get: platform-automation-vsphere-image
#       passed: [ pas ]
#       params:
#         unpack: true
#     - get: platform-automation-tasks
#       params:
#         unpack: true
#
#   - task: credhub-interpolate
#     <<: *credhub-interpolate
#
#   - task: upload-product-mysql
#     image: platform-automation-vsphere-image
#     file: platform-automation-tasks/tasks/upload-product.yml
#     input_mapping:
#       product: mysql-product
#       config: config
#       download-config: config
#       env: interpolated-creds
#     params:
#       ENV_FILE: ((foundation))/env/env.yml
#
#   - task: stage-product-mysql
#     image: platform-automation-vsphere-image
#     file: platform-automation-tasks/tasks/stage-product.yml
#     input_mapping:
#       product: mysql-product
#       config: config
#       download-config: config
#       env: interpolated-creds
#       secrets: interpolated-creds
#     params:
#       ENV_FILE: ((foundation))/env/env.yml
#
#   - task: upload-mysql-stemcell
#     image: platform-automation-vsphere-image
#     file: platform-automation-tasks/tasks/upload-stemcell.yml
#     input_mapping:
#       env: interpolated-creds
#       stemcell: mysql-stemcell
#     params:
#       ENV_FILE: ((foundation))/env/env.yml
#
#   - task: configure-mysql
#     image: platform-automation-vsphere-image
#     file: platform-automation-tasks/tasks/configure-product.yml
#     input_mapping:
#       config: config
#       env: interpolated-creds
#       vars: interpolated-creds
#     params:
#       CONFIG_FILE: ((foundation))/config/mysql.yml
#       VARS_FILES: |
#         vars/((foundation))/vars/mysql-defaults.yml
#         vars/((foundation))/vars/mysql-vars.yml
#       ENV_FILE: ((foundation))/env/env.yml

- name: apply-changes
  serial: true
  build_log_retention:
    builds: 2
  plan:
  - get: config #*credhub-interpolate
    trigger: false
    passed: [ postgres, sso ]
  - get: platform-automation-vsphere-image
    params:
      unpack: true
  - get: platform-automation-tasks
    params:
      unpack: true

  - task: credhub-interpolate
    <<: *credhub-interpolate

  - task: apply-product-changes
    image: platform-automation-vsphere-image
    file: platform-automation-tasks/tasks/apply-changes.yml
    input_mapping:
      config: config #*credhub-interpolate
      env: interpolated-creds
    params:
      ENV_FILE: ((foundation))/env/env.yml

- name: genai
  serial: true
  build_log_retention:
    builds: 2
  plan:
  - get: genai-product
  - get: config
    trigger: false
  - get: platform-automation-vsphere-image
    passed: [ apply-changes-errands ]     
    params:
      unpack: true
  - get: platform-automation-tasks
    params:
      unpack: true

  - task: credhub-interpolate
    <<: *credhub-interpolate

  - task: upload-product
    image: platform-automation-vsphere-image
    file: platform-automation-tasks/tasks/upload-product.yml
    input_mapping:
      product: genai-product
      config: config
      env: interpolated-creds
      vars: interpolated-creds
    params:
      ENV_FILE: ((foundation))/env/env.yml

  - task: stage-product
    image: platform-automation-vsphere-image
    file: platform-automation-tasks/tasks/stage-product.yml
    input_mapping:
      product: genai-product
      env: interpolated-creds
      vars: interpolated-creds
    params:
      ENV_FILE: ((foundation))/env/env.yml

  - task: configure-product
    image: platform-automation-vsphere-image
    file: platform-automation-tasks/tasks/configure-product.yml
    input_mapping:
      config: config
      env: interpolated-creds
      vars: interpolated-creds
    params:
      CONFIG_FILE: ((foundation))/config/genai.yml
      VARS_FILES: |
        vars/((foundation))/vars/genai-defaults.yml
        vars/((foundation))/vars/genai-vars.yml
      ENV_FILE: ((foundation))/env/env.yml

- name: valkey
  serial: true
  build_log_retention:
    builds: 2
  plan:
  - get: valkey-product
  - get: config
    trigger: true
  - get: platform-automation-vsphere-image
    passed: [ cf, nsx ]
    params:
      unpack: true
  - get: platform-automation-tasks
    params:
      unpack: true

  - task: credhub-interpolate
    <<: *credhub-interpolate

  - task: upload-product
    image: platform-automation-vsphere-image
    file: platform-automation-tasks/tasks/upload-product.yml
    input_mapping:
      product: valkey-product
      config: config
      env: interpolated-creds
      vars: interpolated-creds
    params:
      ENV_FILE: ((foundation))/env/env.yml

  - task: stage-product
    image: platform-automation-vsphere-image
    file: platform-automation-tasks/tasks/stage-product.yml
    input_mapping:
      product: valkey-product
      env: interpolated-creds
      vars: interpolated-creds
    params:
      ENV_FILE: ((foundation))/env/env.yml

  - task: configure-product
    image: platform-automation-vsphere-image
    file: platform-automation-tasks/tasks/configure-product.yml
    input_mapping:
      config: config
      env: interpolated-creds
      vars: interpolated-creds
    params:
      CONFIG_FILE: ((foundation))/config/redis.yml
      VARS_FILES: |
        vars/((foundation))/vars/redis-defaults.yml
        vars/((foundation))/vars/redis-vars.yml
      ENV_FILE: ((foundation))/env/env.yml

- name: spring-cloud-gateway
  serial: true
  build_log_retention:
    builds: 2
  plan:
  - get: spring-cloud-gateway-product
  - get: config
    trigger: true
  - get: platform-automation-vsphere-image
    passed: [ cf, nsx ]
    params:
      unpack: true
  - get: platform-automation-tasks
    params:
      unpack: true

  - task: credhub-interpolate
    <<: *credhub-interpolate

  - task: upload-product
    image: platform-automation-vsphere-image
    file: platform-automation-tasks/tasks/upload-product.yml
    input_mapping:
      product: spring-cloud-gateway-product
      config: config
      env: interpolated-creds
      vars: interpolated-creds
    params:
      ENV_FILE: ((foundation))/env/env.yml

  - task: stage-product
    image: platform-automation-vsphere-image
    file: platform-automation-tasks/tasks/stage-product.yml
    input_mapping:
      product: spring-cloud-gateway-product
      env: interpolated-creds
      vars: interpolated-creds
    params:
      ENV_FILE: ((foundation))/env/env.yml

  - task: configure-product
    image: platform-automation-vsphere-image
    file: platform-automation-tasks/tasks/configure-product.yml
    input_mapping:
      config: config
      env: interpolated-creds
      vars: interpolated-creds
    params:
      CONFIG_FILE: ((foundation))/config/scg.yml
      VARS_FILES: |
        vars/((foundation))/vars/scg-defaults.yml
        vars/((foundation))/vars/scg-vars.yml
      ENV_FILE: ((foundation))/env/env.yml

- name: spring-cloud-services
  serial: true
  build_log_retention:
    builds: 2
  plan:
  - get: spring-cloud-services-product
  - get: config
    trigger: true
  - get: platform-automation-vsphere-image
    passed: [ cf, nsx ]
    params:
      unpack: true
  - get: platform-automation-tasks
    params:
      unpack: true

  - task: credhub-interpolate
    <<: *credhub-interpolate

  - task: upload-product
    image: platform-automation-vsphere-image
    file: platform-automation-tasks/tasks/upload-product.yml
    input_mapping:
      product: spring-cloud-services-product
      config: config
      env: interpolated-creds
      vars: interpolated-creds
    params:
      ENV_FILE: ((foundation))/env/env.yml

  - task: stage-product
    image: platform-automation-vsphere-image
    file: platform-automation-tasks/tasks/stage-product.yml
    input_mapping:
      product: spring-cloud-services-product
      env: interpolated-creds
      vars: interpolated-creds
    params:
      ENV_FILE: ((foundation))/env/env.yml

  - task: configure-product
    image: platform-automation-vsphere-image
    file: platform-automation-tasks/tasks/configure-product.yml
    input_mapping:
      config: config
      env: interpolated-creds
      vars: interpolated-creds
    params:
      CONFIG_FILE: ((foundation))/config/scs.yml
      VARS_FILES: |
        vars/((foundation))/vars/scs-defaults.yml
        vars/((foundation))/vars/scs-vars.yml
      ENV_FILE: ((foundation))/env/env.yml

- name: update-errands-cf
  serial: false # try  false 052219
  plan:
  - get: config
    trigger: true
    passed: [ apply-changes ]
  - get: platform-automation-vsphere-image
    params:
      unpack: true
  - get: platform-automation-tasks
    params:
      unpack: true
  - task: credhub-interpolate
    <<: *credhub-interpolate

  - task: configure-tpcf-errands
    image: platform-automation-vsphere-image
    file: platform-automation-tasks/tasks/configure-product.yml
    input_mapping:
      config: config
      env: interpolated-creds
      vars: interpolated-creds
    params:
      CONFIG_FILE: ((foundation))/config/cf.yml
      VARS_FILES: |
        vars/((foundation))/vars/cf-defaults.yml
        vars/((foundation))/vars/cf-vars.yml
        vars/((foundation))/vars/cf-errands.yml
      ENV_FILE: ((foundation))/env/env.yml

  - task: configure-valkey-errands
    image: platform-automation-vsphere-image
    file: platform-automation-tasks/tasks/configure-product.yml
    input_mapping:
      config: config
      env: interpolated-creds
      vars: interpolated-creds
    params:
      CONFIG_FILE: ((foundation))/config/redis.yml
      VARS_FILES: |
        vars/((foundation))/vars/redis-defaults.yml
        vars/((foundation))/vars/redis-vars.yml
        vars/((foundation))/vars/redis-errands.yml
      ENV_FILE: ((foundation))/env/env.yml
      
- name: update-errands-valkey
  serial: false # try  false 052219
  plan:
  - get: config
    trigger: true
    passed: [ apply-changes ]
  - get: platform-automation-vsphere-image
    params:
      unpack: true
  - get: platform-automation-tasks
    params:
      unpack: true
  - task: credhub-interpolate
    <<: *credhub-interpolate

  - task: configure-valkey-errands
    image: platform-automation-vsphere-image
    file: platform-automation-tasks/tasks/configure-product.yml
    input_mapping:
      config: config
      env: interpolated-creds
      vars: interpolated-creds
    params:
      CONFIG_FILE: ((foundation))/config/redis.yml
      VARS_FILES: |
        vars/((foundation))/vars/redis-defaults.yml
        vars/((foundation))/vars/redis-vars.yml
        vars/((foundation))/vars/redis-errands.yml
      ENV_FILE: ((foundation))/env/env.yml

# - name: update-errands-genai
#   serial: false # try  false 052219
#   plan:
#   - get: config
#     trigger: true
#     passed: [ apply-changes ]
#   - get: platform-automation-vsphere-image
#     params:
#       unpack: true
#   - get: platform-automation-tasks
#     params:
#       unpack: true
#   - task: credhub-interpolate
#     <<: *credhub-interpolate

#   - task: configure-errands
#     image: platform-automation-vsphere-image
#     file: platform-automation-tasks/tasks/configure-product.yml
#     input_mapping:
#       config: config
#       env: interpolated-creds
#       vars: interpolated-creds
#     params:
#       CONFIG_FILE: ((foundation))/config/genai.yml
#       VARS_FILES: |
#         vars/((foundation))/vars/genai-defaults.yml
#         vars/((foundation))/vars/genai-vars.yml
#         vars/((foundation))/vars/genai-errands.yml
#       ENV_FILE: ((foundation))/env/env.yml


- name: apply-changes-errands
  serial: true
  build_log_retention:
    builds: 2
  plan:
  - get: config #*credhub-interpolate
    trigger: false
  - get: platform-automation-vsphere-image
    passed: [ update-errands-cf, update-errands-valkey ]  
    params:
      unpack: true
  - get: platform-automation-tasks
    params:
      unpack: true

  - task: credhub-interpolate
    <<: *credhub-interpolate

  - task: apply-product-changes
    image: platform-automation-vsphere-image
    file: platform-automation-tasks/tasks/apply-changes.yml
    input_mapping:
      config: config #*credhub-interpolate
      env: interpolated-creds
    params:
      ENV_FILE: ((foundation))/env/env.yml
      SELECTIVE_DEPLOY_PRODUCTS: "cf, p-redis"

- name: apply-changes-genai
  serial: true
  build_log_retention:
    builds: 2
  plan:
  - get: config #*credhub-interpolate
    trigger: false
  - get: platform-automation-vsphere-image
    passed: [ genai ]  
    params:
      unpack: true
  - get: platform-automation-tasks
    params:
      unpack: true

  - task: credhub-interpolate
    <<: *credhub-interpolate

  - task: apply-product-changes
    image: platform-automation-vsphere-image
    file: platform-automation-tasks/tasks/apply-changes.yml
    input_mapping:
      config: config #*credhub-interpolate
      env: interpolated-creds
    params:
      ENV_FILE: ((foundation))/env/env.yml
      SELECTIVE_DEPLOY_PRODUCTS: "genai"

- name: apply-changes-healthwatch
  serial: true
  build_log_retention:
    builds: 2
  plan:
  - get: config #*credhub-interpolate
    trigger: false
  - get: platform-automation-vsphere-image
    passed: [ healthwatch ]  
    params:
      unpack: true
  - get: platform-automation-tasks
    params:
      unpack: true

  - task: credhub-interpolate
    <<: *credhub-interpolate

  - task: apply-product-changes
    image: platform-automation-vsphere-image
    file: platform-automation-tasks/tasks/apply-changes.yml
    input_mapping:
      config: config #*credhub-interpolate
      env: interpolated-creds
    params:
      ENV_FILE: ((foundation))/env/env.yml
      SELECTIVE_DEPLOY_PRODUCTS: "p-healthwatch2, p-healthwatch2-pas-exporter"


# Use this for creating a local cf admin
# - name: create-org-admin
#   serial: true
#   serial_groups: [ post-deploy ]
#   plan:
#   - aggregate:
#     - get: config
#       trigger: false
#     - get: custom-tasks
#     - get: platform-automation-vsphere-image
#       params:
#         unpack: true
#     - get: platform-automation-tasks
#       params:
#         unpack: true
#
#   - task: credhub-interpolate
#     <<: *credhub-interpolate
#
#   - task: config-pas-admin-user
#     image: platform-automation-vsphere-image
#     file: custom-tasks/tasks/create_pas_org_admin.yml
#     input_mapping:
#       vars: interpolated-creds
#       env: interpolated-creds
#     params:
#       ENV_FILE: ((foundation))/env/env.yml
#       PAS_ADMIN_USERNAME: ((pas_admin_username))
#       PAS_ADMIN_PASSWORD: ((pas_admin_password))
#       PAS_ADMIN_ORG: ((pas_admin_org))

# Use this to add an LDAP security group to UAA admin roles
# - name: add-pas-admin-group
#   serial: true
#   serial_groups: [ post-deploy ]
#   plan:
#   - aggregate:
#     - get: config
#     - get: custom-tasks
#     - get: custom-task-image
#     - get: platform-automation-vsphere-image
#       passed: [apply-changes]
#       trigger: true
#       params:
#         unpack: true
#     - get: platform-automation-tasks
#       params:
#         unpack: true
#
#   - task: credhub-interpolate
#     <<: *credhub-interpolate
#
#   - task: config-pas-admin-group
#     image: custom-task-image
#     file: custom-tasks/tasks/create_pas_admin_ldap_group_maps.yml
#     input_mapping:
#       config: interpolated-creds #Note this is different
#       env: interpolated-creds
#     params:
#       CONFIG_FILE: ((foundation))/vars/cf-vars.yml  #Note this is different
#       ENV_FILE: ((foundation))/env/env.yml
#
#


- name: export-installation
  serial: true
  plan:
  - get: one-time-trigger
  - get: daily-trigger
    trigger: true
  - get: platform-automation-vsphere-image
    params:
      unpack: true
  - get: platform-automation-tasks
    params:
      unpack: true
  - get: config
  - task: credhub-interpolate
    <<: *credhub-interpolate
  - task: export-installation
    image: platform-automation-vsphere-image
    file: platform-automation-tasks/tasks/export-installation.yml
    input_mapping:
      env: interpolated-creds
    params:
      ENV_FILE: ((foundation))/env/env.yml
      INSTALLATION_FILE: installation-$timestamp.zip
  - put: installation
    params:
      file: installation/installation*.zip

- name: staged-director-config-backup
  plan:
  - get: platform-automation-tasks
    params: { unpack: true }
    trigger: true
    passed:
    - export-installation
  - get: platform-automation-vsphere-image
    params: { unpack: true }
  - get: config
  - task: credhub-interpolate
    <<: *credhub-interpolate
  - task: staged-director-config
    image: platform-automation-vsphere-image
    file: platform-automation-tasks/tasks/staged-director-config.yml
    input_mapping:
      env: interpolated-creds
    params:
      ENV_FILE: ((foundation))/env/env.yml
  - put: config-backup
    params:
      file: generated-config/*.yml

- name: staged-config-pas-backup
  plan:
  - get: platform-automation-tasks
    params: {unpack: true}
    trigger: true
    passed:
      - export-installation
  - get: platform-automation-vsphere-image
    params: {unpack: true}
  - get: config
  - task: credhub-interpolate
    <<: *credhub-interpolate
  - task: staged-config
    image: platform-automation-vsphere-image
    file: platform-automation-tasks/tasks/staged-config.yml
    input_mapping:
      env: interpolated-creds
    params:
      PRODUCT_NAME: cf
      ENV_FILE: ((foundation))/env/env.yml
  - put: config-backup
    params:
      file: generated-config/*.yml

# - name: staged-config-pasw-backup
#   plan:
#   - get: platform-automation-tasks
#     params: {unpack: true}
#     trigger: true
#     passed:
#       - export-installation
#   - get: platform-automation-vsphere-image
#     params: {unpack: true}
#   - get: config
#   - task: credhub-interpolate
#     <<: *credhub-interpolate
#   - task: staged-pas-config
#     image: platform-automation-vsphere-image
#     file: platform-automation-tasks/tasks/staged-config.yml
#     input_mapping:
#       env: interpolated-creds
#     params:
#       PRODUCT_NAME: pas-windows
#       ENV_FILE: ((foundation))/env/env.yml
#   - put: config-backup
#     params:
#       file: generated-config/*.yml

# - name: staged-config-healthwatch-backup
#   plan:
#   - get: platform-automation-tasks
#     params: {unpack: true}
#     trigger: true
#     passed:
#       - export-installation
#   - get: platform-automation-vsphere-image
#     params: {unpack: true}
#   - get: config
#   - task: credhub-interpolate
#     <<: *credhub-interpolate
#   - task: staged-pas-config
#     image: platform-automation-vsphere-image
#     file: platform-automation-tasks/tasks/staged-config.yml
#     input_mapping:
#       env: interpolated-creds
#     params:
#       PRODUCT_NAME: p-healthwatch
#       ENV_FILE: ((foundation))/env/env.yml
#   - put: config-backup
#     params:
#       file: generated-config/*.yml

# - name: staged-config-mysql-backup
#   plan:
#   - get: platform-automation-tasks
#     params: {unpack: true}
#     trigger: true
#     passed:
#       - export-installation
#   - get: platform-automation-vsphere-image
#     params: {unpack: true}
#   - get: config
#   - task: credhub-interpolate
#     <<: *credhub-interpolate
#   - task: staged-pas-config
#     image: platform-automation-vsphere-image
#     file: platform-automation-tasks/tasks/staged-config.yml
#     input_mapping:
#       env: interpolated-creds
#     params:
#       PRODUCT_NAME: pivotal-mysql
#       ENV_FILE: ((foundation))/env/env.yml
#   - put: config-backup
#     params:
#       file: generated-config/*.yml

- name: staged-config-nsxt-backup
  plan:
  - get: platform-automation-tasks
    params: {unpack: true}
    trigger: true
    passed:
      - export-installation
  - get: platform-automation-vsphere-image
    params: {unpack: true}
  - get: config
  - task: credhub-interpolate
    <<: *credhub-interpolate
  - task: staged-config
    image: platform-automation-vsphere-image
    file: platform-automation-tasks/tasks/staged-config.yml
    input_mapping:
      env: interpolated-creds
    params:
      PRODUCT_NAME: VMware-NSX-T
      ENV_FILE: ((foundation))/env/env.yml
  - put: config-backup
    params:
      file: generated-config/*.yml

- name: staged-config-postgres-backup
  plan:
  - get: platform-automation-tasks
    params: {unpack: true}
    trigger: true
    passed:
      - export-installation
  - get: platform-automation-vsphere-image
    params: {unpack: true}
  - get: config
  - task: credhub-interpolate
    <<: *credhub-interpolate
  - task: staged-config
    image: platform-automation-vsphere-image
    file: platform-automation-tasks/tasks/staged-config.yml
    input_mapping:
      env: interpolated-creds
    params:
      PRODUCT_NAME: postgres
      ENV_FILE: ((foundation))/env/env.yml
  - put: config-backup
    params:
      file: generated-config/*.yml

- name: staged-config-redis-backup
  plan:
  - get: platform-automation-tasks
    params: {unpack: true}
    trigger: true
    passed:
      - export-installation
  - get: platform-automation-vsphere-image
    params: {unpack: true}
  - get: config
  - task: credhub-interpolate
    <<: *credhub-interpolate
  - task: staged-config
    image: platform-automation-vsphere-image
    file: platform-automation-tasks/tasks/staged-config.yml
    input_mapping:
      env: interpolated-creds
    params:
      PRODUCT_NAME: p-redis
      ENV_FILE: ((foundation))/env/env.yml
  - put: config-backup
    params:
      file: generated-config/*.yml

- name: staged-config-genai-backup
  plan:
  - get: platform-automation-tasks
    params: {unpack: true}
    trigger: true
    passed:
      - export-installation
  - get: platform-automation-vsphere-image
    params: {unpack: true}
  - get: config
  - task: credhub-interpolate
    <<: *credhub-interpolate
  - task: staged-config
    image: platform-automation-vsphere-image
    file: platform-automation-tasks/tasks/staged-config.yml
    input_mapping:
      env: interpolated-creds
    params:
      PRODUCT_NAME: genai
      ENV_FILE: ((foundation))/env/env.yml
  - put: config-backup
    params:
      file: generated-config/*.yml

- name: destroy-installation
  serial: true
  serial_groups: [ teardown ]
  plan:
  - get: config
  - get: state
  - get: platform-automation-vsphere-image
    trigger: false
    params:
      unpack: true
  - get: platform-automation-tasks
    params:
      unpack: true

  - task: credhub-interpolate
    <<: *credhub-interpolate

  - task: delete-installation
    image: platform-automation-vsphere-image
    file: platform-automation-tasks/tasks/delete-installation.yml
    input_mapping:
      env: interpolated-creds
    params:
      ENV_FILE: ((foundation))/env/env.yml

  - task: delete-opsman-vm
    image: platform-automation-vsphere-image
    file: platform-automation-tasks/tasks/delete-vm.yml
    input_mapping:
      state: state
      config: config
      vars: interpolated-creds
      env: interpolated-creds
    params:
      STATE_FILE: ((foundation))/state/state.yml
      OPSMAN_CONFIG_FILE: ((foundation))/config/opsman.yml
      VARS_FILES: |
        vars/((foundation))/vars/opsman-defaults.yml
        vars/((foundation))/vars/opsman-vars.yml

- name: delete-nsx-objects
  serial: true
  plan:
  - get: config
  - get: custom-tasks
  - get: custom-task-image
  - get: platform-automation-vsphere-image
    passed: [ destroy-installation ]
    params:
      unpack: true
  - get: platform-automation-tasks
    params:
      unpack: true

  - task: credhub-interpolate
    <<: *credhub-interpolate

  - task: delete-objects
    image: custom-task-image
    file: custom-tasks/tasks/delete-nsxt-infra.yml
    input_mapping:
      config: config
      vars: interpolated-creds
      custom-tasks: custom-tasks
    params:
      NSXT_INFRA_CONFIG_FILE: vars/((foundation))/vars/nsx-infra.yml
      ACTUALLY_DELETE_NAT_RULES: false #when not set to "DELETE", rule is simply disabled
