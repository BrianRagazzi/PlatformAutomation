---
s3_credentials_binaries: &s3_credentials_binaries
  access_key_id: ((s3.access_key_id))
  secret_access_key: ((s3.secret_access_key))
  endpoint: ((s3.endpoint))
  bucket: ((s3.buckets_pivnet_products))
  region_name: ((s3.region_name))
  skip_ssl_verification: true


resource_types:
- name: pivnet
  type: docker-image
  source:
    repository: pivotalcf/pivnet-resource
    tag: latest-final
- name: email
  type: docker-image
  source:
    repository: pcfseceng/email-resource

resources:
- name: daily
  type: time
  source:
    interval: 24h

- name: send-an-email
  type: email
  source:
    smtp:
      host: ((smtp.host))
      port: ((smtp.port)) #"465" # this must be a string
      username: ((smtp.username))
      password: ((smtp.password))
      anonymous: ((smtp.anonymous))
      skip_ssl_validation: ((smtp.skip_ssl_validation))
    from: ((email.from))
    to: ((email.to)) #optional if `params.additional_recipient` is specified

- name: ops-manager-pivnet
  type: pivnet
  source:
    api_token: ((pivnet_token))
    product_slug: ops-manager
    sort_by: semver
    copy_metadata: true
    product_version: ((opsman-product-version-regex))
- name: pks-pivnet
  type: pivnet
  source:
    api_token: ((pivnet_token))
    product_slug: pivotal-container-service
    sort_by: semver
    copy_metadata: true
    product_version: ((pks-product-version-regex))
- name: harbor-pivnet
  type: pivnet
  source:
    api_token: ((pivnet_token))
    product_slug: harbor-container-registry
    sort_by: semver
    copy_metadata: true
    product_version: ((harbor-product-version-regex))
- name: platauto-pivnet
  type: pivnet
  source:
    api_token: ((pivnet_token))
    product_slug: platform-automation
    sort_by: semver
    copy_metadata: true
    product_version: ((platauto-product-version-regex))

- name: opsman-s3
  type: s3
  source:
    <<: *s3_credentials_binaries
    regexp: \[ops-manager,(.*)\].*.ova
- name: pks-s3
  type: s3
  source:
    <<: *s3_credentials_binaries
    regexp: \[pivotal-container-service,(.*)\]pivotal-container-service-.*.pivotal
- name: harbor-s3
  type: s3
  source:
    <<: *s3_credentials_binaries
    regexp: \[harbor-container-registry,(.*)\]harbor-container-registry-.*.pivotal
- name: platautoimage-s3
  type: s3
  source:
    <<: *s3_credentials_binaries
    regexp: platform-automation-image-(.*).tgz

jobs:
- name: compare_and_email
  build_log_retention:
    builds: 10
  plan:
    - get: daily
      trigger: true
    - get: ops-manager-pivnet
      params:
        globs: []
    - get: opsman-s3
      params:
        skip_download: "true"
    - get: pks-pivnet
      params:
        globs: []
    - get: pks-s3
      params:
        skip_download: "true"
    - get: harbor-pivnet
      params:
        globs: []
    - get: harbor-s3
      params:
        skip_download: "true"
    - get: platauto-pivnet
      params:
        globs: []
    - get: platautoimage-s3
      params:
        skip_download: "true"
    - task: compare
      config:
        platform: linux
        image_resource:
          type: docker-image
          source:
            repository: concourse/buildroot
            tag: git
        inputs:
          - name: ops-manager-pivnet
          - name: opsman-s3
          - name: pks-pivnet
          - name: pks-s3
          - name: harbor-pivnet
          - name: harbor-s3
          - name: platauto-pivnet
          - name: platautoimage-s3
        outputs:
          - name: email-out
        run:
          path: sh
          args:
          - -exc
          - |
            upd=0
            echo "<table><tr><th>Product</th><th>Pivnet</th><th>S3</th></tr>" >> email-out/body
            pivnet_version=$(cat ops-manager-pivnet/metadata.json | jq -r '.Release.Version')
            s3_version=$(cat opsman-s3/version)
            echo "<tr><td>Ops Manager</td><td>$pivnet_version</td><td>" >> email-out/body
            if [[ "$s3_version" == "$pivnet_version" ]]; then
              echo "$s3_version </td><tr>" >> email-out/body
            else
              echo "<b>$s3_version</b></td><tr>" >> email-out/body
              let upd=upd+1
            fi


            pivnet_version=$(cat pks-pivnet/metadata.json | jq -r '.Release.Version')
            s3_version=$(cat pks-s3/version)
            echo "<tr><td>PKS</td><td>$pivnet_version</td><td>" >> email-out/body
            if [[ "$s3_version" == "$pivnet_version" ]]; then
              echo "$s3_version </td><tr>" >> email-out/body
            else
              echo "<b>$s3_version</b></td><tr>" >> email-out/body
              let upd=upd+1
            fi

            pivnet_version=$(cat harbor-pivnet/metadata.json | jq -r '.Release.Version')
            s3_version=$(cat harbor-s3/version)
            echo "<tr><td>Harbor</td><td>$pivnet_version</td><td>" >> email-out/body
            if [[ "$s3_version" == "$pivnet_version" ]]; then
              echo "$s3_version </td><tr>" >> email-out/body
            else
              echo "<b>$s3_version</b></td><tr>" >> email-out/body
              let upd=upd+1
            fi

            pivnet_version=$(cat platauto-pivnet/metadata.json | jq -r '.Release.Version')
            s3_version=$(cat platautoimage-s3/version)
            echo "<tr><td>Plat Auto</td><td>$pivnet_version</td><td>" >> email-out/body
            if [[ "$s3_version" == "$pivnet_version" ]]; then
              echo "$s3_version </td><tr>" >> email-out/body
            else
              echo "<b>$s3_version</b></td><tr>" >> email-out/body
              let upd=upd+1
            fi

            echo "</table>" >> email-out/body
            if [ $upd -gt 0 ]; then
              echo "$upd Pivnet products need updating" >> email-out/subject
            else
              echo "Downloaded Pivnet products are up-to-date" >> email-out/subject
            fi

            echo 'MIME-version: 1.0' >> email-out/headers
            echo 'Content-Type: text/html; charset="UTF-8"' >> email-out/headers
    - put: send-an-email
      params:
        #subject_text: "Version Compare"
        #body_text: email-out/body
        subject: email-out/subject
        body: email-out/body
        headers: email-out/headers
