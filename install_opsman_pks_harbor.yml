resources:
  - name: platform-automation-tasks
    type: s3
    source:
      access_key_id: ((access_key_id))
      secret_access_key: ((secret_access_key))
      endpoint: ((endpoint))
      bucket: ((bucket))
      skip_ssl_verification: true
      regexp: .*tasks-(.*).zip

  - name: platform-automation-image
    type: s3
    source:
      access_key_id: ((access_key_id))
      secret_access_key: ((secret_access_key))
      endpoint: ((endpoint))
      bucket: ((bucket))
      skip_ssl_verification: true
      regexp: .*image-(.*).tgz

  # - name: installation
  #   type: s3
  #   source:
  #     access_key_id: ((s3.access_key_id))
  #     secret_access_key: ((s3.secret_access_key))
  #     region_name: ((s3.region_name))
  #     bucket: ((s3.buckets.installation))
  #     regexp: installation-(.*).zip

  - name: opsman-image
    type: s3
    source:
      access_key_id: ((access_key_id))
      secret_access_key: ((secret_access_key))
      endpoint: ((endpoint))
      bucket: ((binaries_bucket))
      skip_ssl_verification: true
      regexp: "PCF/ops-manager/pcf-vsphere-(.*).ova" #regexp: ((opsman_image_s3_versioned_regexp)) # vsphere ex: pcf-vsphere-(.*).ova

  - name: pks-stemcell
    type: s3
    source:
      access_key_id: ((access_key_id))
      secret_access_key: ((secret_access_key))
      endpoint: ((endpoint))
      bucket: ((binaries_bucket))
      skip_ssl_verification: true
      regexp: PCF/stemcells/bosh-stemcell-(.*)-vsphere-esxi-ubuntu-xenial-go_agent\.tgz

  - name: pks-product
    type: s3
    source:
      access_key_id: ((access_key_id))
      secret_access_key: ((secret_access_key))
      endpoint: ((endpoint))
      bucket: ((binaries_bucket))
      skip_ssl_verification: true
      regexp: PCF/PAS/cf-(.*).pivotal

  - name: harbor-stemcell
    type: s3
    source:
      access_key_id: ((access_key_id))
      secret_access_key: ((secret_access_key))
      endpoint: ((endpoint))
      bucket: ((binaries_bucket))
      skip_ssl_verification: true
      regexp: PCF/stemcells/bosh-stemcell-(.*)-vsphere-esxi-ubuntu-xenial-go_agent\.tgz

  - name: harbor-product
    type: s3
    source:
      access_key_id: ((access_key_id))
      secret_access_key: ((secret_access_key))
      endpoint: ((endpoint))
      bucket: ((binaries_bucket))
      skip_ssl_verification: true
      regexp: PCF/Tiles/p-healthwatch-(.*).pivotal

  # configurations
  - name: configuration
    type: git
    source:
      uri: ((config_github_repo))
      branch: ((config_github_branch))
      username: ((github_username))
      password: ((github_token))


  - name: variable
    type: git
    source:
      uri: ((vars_github_repo))
      branch: ((vars_github_branch))
      username: ((github_username))
      password: ((github_token))

  # triggers used to have jobs do something in a timely manner
  - name: one-time-trigger
    type: time
    source:
      interval: 999999h

  # - name: daily-trigger
  #   type: time
  #   source:
  #     interval: 24h

jobs:
  - name: install-opsman
    serial: true
    serial_groups: [ install ]
    plan:
      - aggregate:
          - get: platform-automation-image
            params:
              unpack: true
          - get: one-time-trigger
            trigger: true
          - get: platform-automation-tasks
            params:
              unpack: true
          - get: opsman-image
          - get: configuration
          - get: variable
      - task: create-vm
        image: platform-automation-image
        file: platform-automation-tasks/tasks/create-vm.yml
        input_mapping:
          image: opsman-image
          state: configuration
          config: configuration
          vars: variable
        params:
          VARS_FILES: vars/((foundation))/vars/opsman-vars.yml
          STATE_FILE: ((foundation))/state/state.yml
          OPSMAN_CONFIG_FILE: ((foundation))/config/opsman.yml
        ensure: &make-state-commit
          do:
            - task: make-commit
              image: platform-automation-image
              file: platform-automation-tasks/tasks/make-git-commit.yml
              input_mapping:
                repository: configuration
                file-source: generated-state
              output_mapping:
                repository-commit: configuration-commit
              params:
                FILE_SOURCE_PATH: state.yml
                FILE_DESTINATION_PATH: ((foundation))/state/state.yml
                GIT_AUTHOR_EMAIL: "pcf-pipeline-bot@example.com"
                GIT_AUTHOR_NAME: "Platform Automation Bot"
                COMMIT_MESSAGE: 'Update state file'
            - put: configuration
              params:
                repository: configuration-commit
                merge: true
      - task: configure-authentication
        image: platform-automation-image
        file: platform-automation-tasks/tasks/configure-authentication.yml
        attempts: 10
        input_mapping:
          env: configuration
          config: configuration
        params:
          ENV_FILE: ((foundation))/env/env.yml
          AUTH_CONFIG_FILE: ((foundation))/config/auth.yml
      - task: configure-director
        image: platform-automation-image
        file: platform-automation-tasks/tasks/configure-director.yml
        input_mapping:
          config: configuration
          env: configuration
          vars: variable
        params:
          VARS_FILES: vars/((foundation))/vars/director-vars.yml
          ENV_FILE: ((foundation))/env/env.yml
          DIRECTOR_CONFIG_FILE: ((foundation))/config/director.yml
      - task: apply-director-changes
        image: platform-automation-image
        file: platform-automation-tasks/tasks/apply-director-changes.yml
        input_mapping:
          env: configuration
        params:
          ENV_FILE: ((foundation))/env/env.yml

  - name: upload-and-stage-pks
    serial: true
    plan:
      - aggregate:
          - get: platform-automation-image
            params:
              unpack: true
            passed:
              - install-opsman
            trigger: true
          - get: platform-automation-tasks
            params:
              unpack: true
          - get: pas-product
          - get: configuration
          - get: variable
      - task: upload-product
        image: platform-automation-image
        file: platform-automation-tasks/tasks/upload-product.yml
        input_mapping:
          product: pas-product
          env: configuration
        params:
          ENV_FILE: ((foundation))/env/env.yml
      - task: stage-product
        image: platform-automation-image
        file: platform-automation-tasks/tasks/stage-product.yml
        input_mapping:
          product: pas-product
          env: configuration
        params:
          ENV_FILE: ((foundation))/env/env.yml

  - name: configure-pks
    serial: true
    plan:
      - aggregate:
          - get: platform-automation-image
            params:
              unpack: true
            passed:
              - upload-and-stage-pas
              - upload-stemcells
            trigger: true
          - get: platform-automation-tasks
            params:
              unpack: true
          - get: configuration
          - get: variable
      - task: configure-pas
        image: platform-automation-image
        file: platform-automation-tasks/tasks/configure-product.yml
        input_mapping:
          config: configuration
          env: configuration
          vars: variable
        params:
          CONFIG_FILE: ((foundation))/config/cf.yml
          VARS_FILES: vars/((foundation))/vars/cf-vars.yml
          ENV_FILE: ((foundation))/env/env.yml

  - name: upload-stemcells
    serial: true
    plan:
      - aggregate:
          - get: platform-automation-image
            params:
              unpack: true
            passed:
              - install-opsman
            trigger: true
          - get: platform-automation-tasks
            params:
              unpack: true
          - get: pas-stemcell
            trigger: true
          - get: healthwatch-stemcell
            trigger: true
          - get: configuration
          - get: variable
      - task: upload-pas-stemcell
        image: platform-automation-image
        file: platform-automation-tasks/tasks/upload-stemcell.yml
        input_mapping:
          env: configuration
          stemcell: pas-stemcell
        params:
          ENV_FILE: ((foundation))/env/env.yml
      - task: upload-healthwatch-stemcell
        image: platform-automation-image
        file: platform-automation-tasks/tasks/upload-stemcell.yml
        input_mapping:
          env: configuration
          stemcell: healthwatch-stemcell
        params:
          ENV_FILE: ((foundation))/env/env.yml

  - name: upload-and-stage-harbor
    serial: true
    plan:
      - aggregate:
          - get: platform-automation-image
            params:
              unpack: true
            passed:
              - install-opsman
            trigger: true
          - get: platform-automation-tasks
            params:
              unpack: true
          - get: healthwatch-product
          - get: configuration
          - get: variable
      - task: upload-and-stage-product
        image: platform-automation-image
        file: platform-automation-tasks/tasks/upload-and-stage-product.yml
        input_mapping:
          product: healthwatch-product
          env: configuration
        params:
          ENV_FILE: ((foundation))/env/env.yml

  - name: configure-harbor
    serial: true
    plan:
      - aggregate:
          - get: platform-automation-image
            params:
              unpack: true
            passed:
              - upload-and-stage-healthwatch
            trigger: true
          - get: platform-automation-tasks
            params:
              unpack: true
          - get: configuration
          - get: variable
      - task: configure-healthwatch
        image: platform-automation-image
        file: platform-automation-tasks/tasks/configure-product.yml
        input_mapping:
          config: configuration
          env: configuration
          vars: variable
        params:
          CONFIG_FILE: ((foundation))/config/healthwatch.yml
          ENV_FILE: ((foundation))/env/env.yml
          VARS_FILES: vars/((foundation))/vars/healthwatch-vars.yml

  - name: apply-product-changes
    serial: true
    plan:
      - aggregate:
          - get: platform-automation-image
            params:
              unpack: true
            passed:
              - configure-healthwatch
              - configure-pas
              - configure-nsx
            trigger: false
          - get: platform-automation-tasks
            params:
              unpack: true
          - get: configuration
          - get: variable
      - task: apply-product-changes
        image: platform-automation-image
        file: platform-automation-tasks/tasks/apply-changes.yml
        input_mapping:
          env: configuration
        params:
          ENV_FILE: ((foundation))/env/env.yml
